var links = [
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/list_host_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_host_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tandroid:tint=\"@android:color/white\"\n\t\tandroid:contentDescription=\"@string/hostpref_add_host\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "source_fullname": null, "methodSourceLink": null, "target": "HostListActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.HostListActivity.png", "methodTargetLink": [{"source": "onResume", "target": "disconnectAll"}, {"source": "access$100", "target": "disconnectAll"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onMenuItemClick", "target": "access$100"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onClick", "target": "access$002"}, {"source": "onClick", "target": "access$200"}, {"source": "onClick", "target": "access$002"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "onActivityResult", "target": "updateList"}], "source_layoutcode": null, "target_actcode": "public class HostListActivity extends AppCompatListActivity implements OnHostStatusChangedListener {\n    protected TerminalManager bound = null;\n    private boolean closeOnDisconnectAll = true;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            HostListActivity.this.bound = ((TerminalBinder) service).getService();\n            HostListActivity.this.updateList();\n            HostListActivity.this.bound.registerOnHostStatusChangedListener(HostListActivity.this);\n            if (HostListActivity.this.waitingForDisconnectAll) {\n                HostListActivity.this.disconnectAll();\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            HostListActivity.this.bound.unregisterOnHostStatusChangedListener(HostListActivity.this);\n            HostListActivity.this.bound = null;\n            HostListActivity.this.updateList();\n        }\n    };\n    private MenuItem disconnectall;\n    private HostStorage hostdb;\n    private List&lt;HostBean> hosts;\n    protected LayoutInflater inflater = null;\n    protected boolean makingShortcut = false;\n    private SharedPreferences prefs = null;\n    private MenuItem sortcolor;\n    protected boolean sortedByColor = false;\n    private MenuItem sortlast;\n    private boolean waitingForDisconnectAll = false;\n    private class HostAdapter extends ItemAdapter {\n        private final List&lt;HostBean> hosts;\n        private final TerminalManager manager;\n        public HostAdapter(Context context, List&lt;HostBean> hosts, TerminalManager manager) {\n            super(context);\n            this.hosts = hosts;\n            this.manager = manager;\n        }\n        private int getConnectedState(HostBean host) {\n            if (this.manager == null || host == null) {\n                return 1;\n            }\n            if (this.manager.getConnectedBridge(host) != null) {\n                return 2;\n            }\n            if (this.manager.disconnected.contains(host)) {\n                return 3;\n            }\n            return 1;\n        }\n        public HostViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new HostViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_host, parent, false));\n        }\n        @TargetApi(16)\n        private void hideFromAccessibility(View view, boolean hide) {\n            view.setImportantForAccessibility(hide ? 2 : 1);\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            int chosenStyleFirstLine;\n            int chosenStyleSecondLine;\n            HostViewHolder hostHolder = (HostViewHolder) holder;\n            HostBean host = (HostBean) this.hosts.get(position);\n            hostHolder.host = host;\n            if (host == null) {\n                Log.e(\"HostAdapter\", \"Host bean is null!\");\n                hostHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                hostHolder.nickname.setText(host.getNickname());\n            }\n            switch (getConnectedState(host)) {\n                case 1:\n                    hostHolder.icon.setImageState(new int[0], true);\n                    hostHolder.icon.setContentDescription(null);\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, true);\n                        break;\n                    }\n                    break;\n                case 2:\n                    hostHolder.icon.setImageState(new int[]{16842912}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_connected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                case 3:\n                    hostHolder.icon.setImageState(new int[]{16842920}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_disconnected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                default:\n                    Log.e(\"HostAdapter\", \"Unknown host state encountered: \" + getConnectedState(host));\n                    break;\n            }\n            if (\"red\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Red;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Red;\n            } else if (\"green\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Green;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Green;\n            } else if (\"blue\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Blue;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Blue;\n            } else {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText;\n            }\n            hostHolder.nickname.setTextAppearance(this.context, chosenStyleFirstLine);\n            hostHolder.caption.setTextAppearance(this.context, chosenStyleSecondLine);\n            CharSequence nice = this.context.getString(R.string.bind_never);\n            if (host.getLastConnect() &gt; 0) {\n                nice = DateUtils.getRelativeTimeSpanString(host.getLastConnect() * 1000);\n            }\n            hostHolder.caption.setText(nice);\n        }\n        public long getItemId(int position) {\n            return ((HostBean) this.hosts.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.hosts.size();\n        }\n    }\n    public class HostViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public HostBean host;\n        public final ImageView icon;\n        public final TextView nickname;\n        public HostViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            Intent contents = new Intent(\"android.intent.action.VIEW\", this.host.getUri());\n            contents.setFlags(67108864);\n            if (HostListActivity.this.makingShortcut) {\n                ShortcutIconResource icon = ShortcutIconResource.fromContext(HostListActivity.this, R.drawable.icon);\n                Intent intent = new Intent();\n                intent.putExtra(\"android.intent.extra.shortcut.INTENT\", contents);\n                intent.putExtra(\"android.intent.extra.shortcut.NAME\", this.host.getNickname());\n                intent.putExtra(\"android.intent.extra.shortcut.ICON_RESOURCE\", icon);\n                HostListActivity.this.setResult(-1, intent);\n                HostListActivity.this.finish();\n                return;\n            }\n            contents.setClass(HostListActivity.this, ConsoleActivity.class);\n            HostListActivity.this.startActivity(contents);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean z;\n            menu.setHeaderTitle(this.host.getNickname());\n            MenuItem connect = menu.add(R.string.list_host_disconnect);\n            final TerminalBridge bridge = HostListActivity.this.bound == null ? null : HostListActivity.this.bound.getConnectedBridge(this.host);\n            if (bridge != null) {\n                z = true;\n            } else {\n                z = false;\n            }\n            connect.setEnabled(z);\n            connect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    bridge.dispatchDisconnect(true);\n                    return true;\n                }\n            });\n            menu.add(R.string.list_host_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForExistingHost(HostListActivity.this, HostViewHolder.this.host.getId()), 1);\n                    return true;\n                }\n            });\n            MenuItem portForwards = menu.add(R.string.list_host_portforwards);\n            portForwards.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    Intent intent = new Intent(HostListActivity.this, PortForwardListActivity.class);\n                    intent.putExtra(\"android.intent.extra.TITLE\", HostViewHolder.this.host.getId());\n                    HostListActivity.this.startActivityForResult(intent, 1);\n                    return true;\n                }\n            });\n            if (!TransportFactory.canForwardPorts(this.host.getProtocol())) {\n                portForwards.setEnabled(false);\n            }\n            menu.add(R.string.list_host_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(HostListActivity.this, R.style.AlertDialogTheme).setMessage(HostListActivity.this.getString(R.string.delete_message, new Object[]{HostViewHolder.this.host.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (bridge != null) {\n                                bridge.dispatchDisconnect(true);\n                            }\n                            HostListActivity.this.hostdb.deleteHost(HostViewHolder.this.host);\n                            HostListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n        this.closeOnDisconnectAll = true;\n    }\n    public void onResume() {\n        super.onResume();\n        if ((getIntent().getFlags() & 1048576) == 0 && \"org.connectbot.action.DISCONNECT\".equals(getIntent().getAction())) {\n            Log.d(\"CB.HostListActivity\", \"Got disconnect all request\");\n            disconnectAll();\n        }\n        boolean z = this.waitingForDisconnectAll && this.closeOnDisconnectAll;\n        this.closeOnDisconnectAll = z;\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == 1) {\n            updateList();\n        }\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        int i = 0;\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_hostlist);\n        setTitle(R.string.title_hosts_list);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (Build.MANUFACTURER.equals(\"HTC\") && Build.DEVICE.equals(\"dream\")) {\n            Editor editor = this.prefs.edit();\n            boolean doCommit = false;\n            if (!(this.prefs.contains(\"shiftfkeys\") || this.prefs.contains(\"ctrlfkeys\"))) {\n                editor.putBoolean(\"shiftfkeys\", true);\n                editor.putBoolean(\"ctrlfkeys\", true);\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"stickymodifiers\")) {\n                editor.putString(\"stickymodifiers\", \"yes\");\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"keymode\")) {\n                editor.putString(\"keymode\", \"Use right-side keys\");\n                doCommit = true;\n            }\n            if (doCommit) {\n                editor.commit();\n            }\n        }\n        if (\"android.intent.action.CREATE_SHORTCUT\".equals(getIntent().getAction()) || \"android.intent.action.PICK\".equals(getIntent().getAction())) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.makingShortcut = z;\n        this.hostdb = HostDatabase.get(this);\n        this.sortedByColor = this.prefs.getBoolean(\"sortByColor\", false);\n        registerForContextMenu(this.mListView);\n        FloatingActionButton addHostButton = (FloatingActionButton) findViewById(R.id.add_host_button);\n        if (this.makingShortcut) {\n            i = 8;\n        }\n        addHostButton.setVisibility(i);\n        addHostButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForNewHost(HostListActivity.this), 1);\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            boolean z2;\n            MenuItem menuItem = this.sortcolor;\n            if (this.sortedByColor) {\n                z2 = false;\n            } else {\n                z2 = true;\n            }\n            menuItem.setVisible(z2);\n            this.sortlast.setVisible(this.sortedByColor);\n            MenuItem menuItem2 = this.disconnectall;\n            if (this.bound != null && this.bound.getBridges().size() &gt; 0) {\n                z = true;\n            }\n            menuItem2.setEnabled(z);\n        }\n        return true;\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            this.sortcolor = menu.add(R.string.list_menu_sortcolor);\n            this.sortcolor.setIcon(17301586);\n            this.sortcolor.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = true;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            this.sortlast = menu.add(R.string.list_menu_sortname);\n            this.sortlast.setIcon(17301586);\n            this.sortlast.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = false;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem keys = menu.add(R.string.list_menu_pubkeys);\n            keys.setIcon(17301551);\n            keys.setIntent(new Intent(this, PubkeyListActivity.class));\n            MenuItem colors = menu.add(R.string.title_colors);\n            colors.setIcon(17301587);\n            colors.setIntent(new Intent(this, ColorsActivity.class));\n            this.disconnectall = menu.add(R.string.list_menu_disconnect);\n            this.disconnectall.setIcon(17301564);\n            this.disconnectall.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem menuItem) {\n                    HostListActivity.this.disconnectAll();\n                    return false;\n                }\n            });\n            MenuItem settings = menu.add(R.string.list_menu_settings);\n            settings.setIcon(17301577);\n            settings.setIntent(new Intent(this, SettingsActivity.class));\n            MenuItem help = menu.add(R.string.title_help);\n            help.setIcon(17301568);\n            help.setIntent(new Intent(this, HelpActivity.class));\n        }\n        return true;\n    }\n    private void disconnectAll() {\n        if (this.bound == null) {\n            this.waitingForDisconnectAll = true;\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage(getString(R.string.disconnect_all_message)).setPositiveButton(R.string.disconnect_all_pos, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.bound.disconnectAll(true, false);\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                    if (HostListActivity.this.closeOnDisconnectAll) {\n                        HostListActivity.this.finish();\n                    }\n                }\n            }).setNegativeButton(R.string.disconnect_all_neg, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                }\n            }).create().show();\n        }\n    }\n    protected void updateList() {\n        if (this.prefs.getBoolean(\"sortByColor\", false) != this.sortedByColor) {\n            Editor edit = this.prefs.edit();\n            edit.putBoolean(\"sortByColor\", this.sortedByColor);\n            edit.commit();\n        }\n        if (this.hostdb == null) {\n            this.hostdb = HostDatabase.get(this);\n        }\n        this.hosts = this.hostdb.getHosts(this.sortedByColor);\n        if (this.bound != null) {\n            Iterator it = this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                TerminalBridge bridge = (TerminalBridge) it.next();\n                if (!this.hosts.contains(bridge.host)) {\n                    this.hosts.add(0, bridge.host);\n                }\n            }\n        }\n        this.mAdapter = new HostAdapter(this, this.hosts, this.bound);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    public void onHostStatusChanged() {\n        updateList();\n    }\n}\n", "source": "APP", "source_actcode": null, "sourceimg": "./org.connectbot_19100/icon/icon.png", "type": "suit", "target_fullname": "org.connectbot.HostListActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "ConsoleActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "methodTargetLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.ConsoleActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/portforward_list_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_port_forward_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "PortForwardListActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.PortForwardListActivity.png", "methodTargetLink": [{"source": "onCreate", "target": "updateList"}, {"source": "onClick", "target": "handleMessage"}, {"source": "onClick", "target": "access$000"}, {"source": "ACTIVITY", "target": "onCreate"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class PortForwardListActivity extends AppCompatListActivity {\n    private ServiceConnection connection = null;\n    private HostBean host;\n    protected TerminalBridge hostBridge = null;\n    protected HostDatabase hostdb;\n    protected LayoutInflater inflater = null;\n    protected Handler updateHandler = new Handler(new WeakReference(this));\n    private static class Handler extends android.os.Handler {\n        private WeakReference&lt;PortForwardListActivity> mActivity;\n        Handler(WeakReference&lt;PortForwardListActivity> activity) {\n            this.mActivity = activity;\n        }\n        public void handleMessage(Message msg) {\n            ((PortForwardListActivity) this.mActivity.get()).updateList();\n        }\n    }\n    private class PortForwardAdapter extends ItemAdapter {\n        private final List&lt;PortForwardBean> portForwards;\n        public PortForwardAdapter(Context context, List&lt;PortForwardBean> portForwards) {\n            super(context);\n            this.portForwards = portForwards;\n        }\n        public PortForwardViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new PortForwardViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_portforward, parent, false));\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            PortForwardViewHolder portForwardHolder = (PortForwardViewHolder) holder;\n            PortForwardBean portForward = (PortForwardBean) this.portForwards.get(position);\n            portForwardHolder.portForward = portForward;\n            portForwardHolder.nickname.setText(portForward.getNickname());\n            portForwardHolder.caption.setText(portForward.getDescription());\n            if (PortForwardListActivity.this.hostBridge != null && !portForward.isEnabled()) {\n                portForwardHolder.nickname.setPaintFlags(portForwardHolder.nickname.getPaintFlags() | 16);\n                portForwardHolder.caption.setPaintFlags(portForwardHolder.caption.getPaintFlags() | 16);\n            }\n        }\n        public long getItemId(int position) {\n            return ((PortForwardBean) this.portForwards.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.portForwards.size();\n        }\n    }\n    private class PortForwardViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public final TextView nickname;\n        public PortForwardBean portForward;\n        public PortForwardViewHolder(View v) {\n            super(v);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            if (PortForwardListActivity.this.hostBridge != null) {\n                if (this.portForward.isEnabled()) {\n                    PortForwardListActivity.this.hostBridge.disablePortForward(this.portForward);\n                } else if (!PortForwardListActivity.this.hostBridge.enablePortForward(this.portForward)) {\n                    Toast.makeText(PortForwardListActivity.this, PortForwardListActivity.this.getString(R.string.portforward_problem), 1).show();\n                }\n                PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n            }\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            menu.setHeaderTitle(this.portForward.getNickname());\n            menu.add(R.string.portforward_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    View editTunnelView = View.inflate(PortForwardListActivity.this, R.layout.dia_portforward, null);\n                    final Spinner typeSpinner = (Spinner) editTunnelView.findViewById(R.id.portforward_type);\n                    if (\"local\".equals(PortForwardViewHolder.this.portForward.getType())) {\n                        typeSpinner.setSelection(0);\n                    } else if (\"remote\".equals(PortForwardViewHolder.this.portForward.getType())) {\n                        typeSpinner.setSelection(1);\n                    } else {\n                        typeSpinner.setSelection(2);\n                    }\n                    final EditText nicknameEdit = (EditText) editTunnelView.findViewById(R.id.nickname);\n                    nicknameEdit.setText(PortForwardViewHolder.this.portForward.getNickname());\n                    final EditText sourcePortEdit = (EditText) editTunnelView.findViewById(R.id.portforward_source);\n                    sourcePortEdit.setText(String.valueOf(PortForwardViewHolder.this.portForward.getSourcePort()));\n                    final EditText destEdit = (EditText) editTunnelView.findViewById(R.id.portforward_destination);\n                    if (\"dynamic5\".equals(PortForwardViewHolder.this.portForward.getType())) {\n                        destEdit.setEnabled(false);\n                    } else {\n                        destEdit.setText(String.format(\"%s:%d\", new Object[]{PortForwardViewHolder.this.portForward.getDestAddr(), Integer.valueOf(PortForwardViewHolder.this.portForward.getDestPort())}));\n                    }\n                    typeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\n                        public void onItemSelected(AdapterView&lt;?> adapterView, View view, int position, long id) {\n                            destEdit.setEnabled(position != 2);\n                        }\n                        public void onNothingSelected(AdapterView&lt;?> adapterView) {\n                        }\n                    });\n                    new Builder(PortForwardListActivity.this, R.style.AlertDialogTheme).setView(editTunnelView).setPositiveButton(R.string.button_change, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            try {\n                                if (PortForwardListActivity.this.hostBridge != null) {\n                                    PortForwardListActivity.this.hostBridge.disablePortForward(PortForwardViewHolder.this.portForward);\n                                }\n                                PortForwardViewHolder.this.portForward.setNickname(nicknameEdit.getText().toString());\n                                switch (typeSpinner.getSelectedItemPosition()) {\n                                    case 0:\n                                        PortForwardViewHolder.this.portForward.setType(\"local\");\n                                        break;\n                                    case 1:\n                                        PortForwardViewHolder.this.portForward.setType(\"remote\");\n                                        break;\n                                    case 2:\n                                        PortForwardViewHolder.this.portForward.setType(\"dynamic5\");\n                                        break;\n                                }\n                                PortForwardViewHolder.this.portForward.setSourcePort(Integer.parseInt(sourcePortEdit.getText().toString()));\n                                PortForwardViewHolder.this.portForward.setDest(destEdit.getText().toString());\n                                if (PortForwardListActivity.this.hostBridge != null) {\n                                    PortForwardListActivity.this.updateHandler.postDelayed(new Runnable() {\n                                        public void run() {\n                                            PortForwardListActivity.this.hostBridge.enablePortForward(PortForwardViewHolder.this.portForward);\n                                            PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n                                        }\n                                    }, 500);\n                                }\n                                if (PortForwardListActivity.this.hostdb.savePortForward(PortForwardViewHolder.this.portForward)) {\n                                    PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n                                    return;\n                                }\n                                throw new SQLException(\"Could not save port forward\");\n                            } catch (Exception e) {\n                                Log.e(\"CB.PortForwardListAct\", \"Could not update port forward\", e);\n                            }\n                        }\n                    }).setNegativeButton(17039360, null).create().show();\n                    return true;\n                }\n            });\n            menu.add(R.string.portforward_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(PortForwardListActivity.this, R.style.AlertDialogTheme).setMessage(PortForwardListActivity.this.getString(R.string.delete_message, new Object[]{PortForwardViewHolder.this.portForward.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            try {\n                                if (PortForwardListActivity.this.hostBridge != null) {\n                                    PortForwardListActivity.this.hostBridge.removePortForward(PortForwardViewHolder.this.portForward);\n                                }\n                                PortForwardListActivity.this.hostdb.deletePortForward(PortForwardViewHolder.this.portForward);\n                            } catch (Exception e) {\n                                Log.e(\"CB.PortForwardListAct\", \"Could not delete port forward\", e);\n                            }\n                            PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n    }\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        long hostId = getIntent().getLongExtra(\"android.intent.extra.TITLE\", -1);\n        setContentView((int) R.layout.act_portforwardlist);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.hostdb = HostDatabase.get(this);\n        this.host = this.hostdb.findHostById(hostId);\n        String nickname = this.host != null ? this.host.getNickname() : null;\n        Resources resources = getResources();\n        if (nickname != null) {\n            setTitle(String.format(\"%s (%s)\", new Object[]{resources.getText(R.string.title_port_forwards_list), nickname}));\n        }\n        this.connection = new ServiceConnection() {\n            public void onServiceConnected(ComponentName className, IBinder service) {\n                TerminalManager bound = ((TerminalBinder) service).getService();\n                PortForwardListActivity.this.hostBridge = bound.getConnectedBridge(PortForwardListActivity.this.host);\n                PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n            }\n            public void onServiceDisconnected(ComponentName name) {\n                PortForwardListActivity.this.hostBridge = null;\n            }\n        };\n        updateList();\n        registerForContextMenu(this.mListView);\n        this.inflater = LayoutInflater.from(this);\n        ((FloatingActionButton) findViewById(R.id.add_port_forward_button)).setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                final View portForwardView = View.inflate(PortForwardListActivity.this, R.layout.dia_portforward, null);\n                final EditText destEdit = (EditText) portForwardView.findViewById(R.id.portforward_destination);\n                final Spinner typeSpinner = (Spinner) portForwardView.findViewById(R.id.portforward_type);\n                typeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {\n                    public void onItemSelected(AdapterView&lt;?> adapterView, View view, int position, long id) {\n                        destEdit.setEnabled(position != 2);\n                    }\n                    public void onNothingSelected(AdapterView&lt;?> adapterView) {\n                    }\n                });\n                new Builder(PortForwardListActivity.this, R.style.AlertDialogTheme).setView(portForwardView).setPositiveButton(R.string.portforward_pos, new OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            EditText nicknameEdit = (EditText) portForwardView.findViewById(R.id.nickname);\n                            EditText sourcePortEdit = (EditText) portForwardView.findViewById(R.id.portforward_source);\n                            String type = \"local\";\n                            switch (typeSpinner.getSelectedItemPosition()) {\n                                case 0:\n                                    type = \"local\";\n                                    break;\n                                case 1:\n                                    type = \"remote\";\n                                    break;\n                                case 2:\n                                    type = \"dynamic5\";\n                                    break;\n                            }\n                            String sourcePort = sourcePortEdit.getText().toString();\n                            if (sourcePort.length() == 0) {\n                                sourcePort = sourcePortEdit.getHint().toString();\n                            }\n                            String destination = destEdit.getText().toString();\n                            if (destination.length() == 0) {\n                                destination = destEdit.getHint().toString();\n                            }\n                            PortForwardBean portForward = new PortForwardBean(PortForwardListActivity.this.host != null ? PortForwardListActivity.this.host.getId() : -1, nicknameEdit.getText().toString(), type, sourcePort, destination);\n                            if (PortForwardListActivity.this.hostBridge != null) {\n                                PortForwardListActivity.this.hostBridge.addPortForward(portForward);\n                                PortForwardListActivity.this.hostBridge.enablePortForward(portForward);\n                            }\n                            if (PortForwardListActivity.this.host == null || PortForwardListActivity.this.hostdb.savePortForward(portForward)) {\n                                PortForwardListActivity.this.updateHandler.sendEmptyMessage(-1);\n                                return;\n                            }\n                            throw new SQLException(\"Could not save port forward\");\n                        } catch (Exception e) {\n                            Log.e(\"CB.PortForwardListAct\", \"Could not update port forward\", e);\n                        }\n                    }\n                }).setNegativeButton(R.string.delete_neg, null).create().show();\n            }\n        });\n    }\n    protected void updateList() {\n        List&lt;PortForwardBean> portForwards;\n        if (this.hostBridge != null) {\n            portForwards = this.hostBridge.getPortForwards();\n        } else if (this.hostdb != null) {\n            portForwards = this.hostdb.getPortForwardsForHost(this.host);\n        } else {\n            return;\n        }\n        this.mAdapter = new PortForwardAdapter(this, portForwards);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.PortForwardListActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/pubkey_list_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n&lt;/LinearLayout>\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "PubkeyListActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.PubkeyListActivity.png", "methodTargetLink": [{"source": "readKeyFromFile", "target": "readPKCS8Key"}, {"source": "readKeyFromFile", "target": "convertAlgorithmName"}, {"source": "readKeyFromFile", "target": "updateList"}, {"source": "readKeyFromFile", "target": "getBytesFromInputStream"}, {"source": "onStart", "target": "updateList"}, {"source": "importExistingKey", "target": "importExistingKeyKitKat"}, {"source": "importExistingKey", "target": "importExistingKeyOpenIntents"}, {"source": "importExistingKey", "target": "importExistingKeyAndExplorer"}, {"source": "importExistingKey", "target": "pickFileSimple"}, {"source": "access$100", "target": "readKeyFromFile"}, {"source": "onClick", "target": "access$100"}, {"source": "ACTIVITY", "target": "onStart"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "onOptionsItemSelected", "target": "importExistingKey"}, {"source": "onActivityResult", "target": "readKeyFromFile"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class PubkeyListActivity extends AppCompatListActivity implements EventListener {\n    private TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private MenuItem confirmUse = null;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            PubkeyListActivity.this.bound = ((TerminalBinder) service).getService();\n            PubkeyListActivity.this.updateList();\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            PubkeyListActivity.this.bound = null;\n            PubkeyListActivity.this.updateList();\n        }\n    };\n    private LayoutInflater inflater = null;\n    private MenuItem onstartToggle = null;\n    private List&lt;PubkeyBean> pubkeys;\n    private class PubkeyAdapter extends ItemAdapter {\n        private final List&lt;PubkeyBean> pubkeys;\n        public PubkeyAdapter(Context context, List&lt;PubkeyBean> pubkeys) {\n            super(context);\n            this.pubkeys = pubkeys;\n        }\n        public PubkeyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new PubkeyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_pubkey, parent, false));\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            PubkeyViewHolder pubkeyHolder = (PubkeyViewHolder) holder;\n            PubkeyBean pubkey = (PubkeyBean) this.pubkeys.get(position);\n            pubkeyHolder.pubkey = pubkey;\n            if (pubkey == null) {\n                Log.e(\"PubkeyAdapter\", \"Pubkey bean is null!\");\n                pubkeyHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                pubkeyHolder.nickname.setText(pubkey.getNickname());\n            }\n            if (\"IMPORTED\".equals(pubkey.getType())) {\n                try {\n                    String type;\n                    PEMStructure struct = PEMDecoder.parsePEM(new String(pubkey.getPrivateKey()).toCharArray());\n                    if (struct.pemType == 1) {\n                        type = \"RSA\";\n                    } else if (struct.pemType == 2) {\n                        type = \"DSA\";\n                    } else if (struct.pemType == 3) {\n                        type = \"EC\";\n                    } else if (struct.pemType == 4) {\n                        type = \"OpenSSH\";\n                    } else {\n                        throw new RuntimeException(\"Unexpected key type: \" + struct.pemType);\n                    }\n                    pubkeyHolder.caption.setText(String.format(\"%s unknown-bit\", new Object[]{type}));\n                } catch (IOException e) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Error decoding IMPORTED public key at \" + pubkey.getId(), e);\n                }\n            } else {\n                try {\n                    pubkeyHolder.caption.setText(pubkey.getDescription(PubkeyListActivity.this.getApplicationContext()));\n                } catch (Exception e2) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Error decoding public key at \" + pubkey.getId(), e2);\n                    pubkeyHolder.caption.setText(R.string.pubkey_unknown_format);\n                }\n            }\n            if (PubkeyListActivity.this.bound == null) {\n                pubkeyHolder.icon.setVisibility(8);\n                return;\n            }\n            pubkeyHolder.icon.setVisibility(0);\n            if (PubkeyListActivity.this.bound.isKeyLoaded(pubkey.getNickname())) {\n                pubkeyHolder.icon.setImageState(new int[]{16842912}, true);\n                return;\n            }\n            pubkeyHolder.icon.setImageState(new int[0], true);\n        }\n        public int getItemCount() {\n            return this.pubkeys.size();\n        }\n        public long getItemId(int position) {\n            return ((PubkeyBean) this.pubkeys.get(position)).getId();\n        }\n    }\n    public class PubkeyViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public final ImageView icon;\n        public final TextView nickname;\n        public PubkeyBean pubkey;\n        public PubkeyViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            boolean loaded = PubkeyListActivity.this.bound != null && PubkeyListActivity.this.bound.isKeyLoaded(this.pubkey.getNickname());\n            if (loaded) {\n                PubkeyListActivity.this.bound.removeKey(this.pubkey.getNickname());\n                PubkeyListActivity.this.updateList();\n                return;\n            }\n            PubkeyListActivity.this.handleAddKey(this.pubkey);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean loaded;\n            boolean z;\n            boolean z2 = false;\n            menu.setHeaderTitle(this.pubkey.getNickname());\n            final boolean imported = \"IMPORTED\".equals(this.pubkey.getType());\n            if (PubkeyListActivity.this.bound == null || !PubkeyListActivity.this.bound.isKeyLoaded(this.pubkey.getNickname())) {\n                loaded = false;\n            } else {\n                loaded = true;\n            }\n            menu.add(loaded ? R.string.pubkey_memory_unload : R.string.pubkey_memory_load).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    if (loaded) {\n                        PubkeyListActivity.this.bound.removeKey(PubkeyViewHolder.this.pubkey.getNickname());\n                        PubkeyListActivity.this.updateList();\n                    } else {\n                        PubkeyListActivity.this.handleAddKey(PubkeyViewHolder.this.pubkey);\n                    }\n                    return true;\n                }\n            });\n            PubkeyListActivity.this.onstartToggle = menu.add(R.string.pubkey_load_on_start);\n            MenuItem access$200 = PubkeyListActivity.this.onstartToggle;\n            if (this.pubkey.isEncrypted()) {\n                z = false;\n            } else {\n                z = true;\n            }\n            access$200.setEnabled(z);\n            PubkeyListActivity.this.onstartToggle.setCheckable(true);\n            PubkeyListActivity.this.onstartToggle.setChecked(this.pubkey.isStartup());\n            PubkeyListActivity.this.onstartToggle.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    PubkeyViewHolder.this.pubkey.setStartup(!PubkeyViewHolder.this.pubkey.isStartup());\n                    PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                    PubkeyListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem copyPublicToClipboard = menu.add(R.string.pubkey_copy_public);\n            if (imported) {\n                z = false;\n            } else {\n                z = true;\n            }\n            copyPublicToClipboard.setEnabled(z);\n            copyPublicToClipboard.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    try {\n                        PubkeyListActivity.this.clipboard.setText(PubkeyUtils.convertToOpenSSHFormat(PubkeyUtils.decodePublic(PubkeyViewHolder.this.pubkey.getPublicKey(), PubkeyViewHolder.this.pubkey.getType()), PubkeyViewHolder.this.pubkey.getNickname()));\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    return true;\n                }\n            });\n            MenuItem copyPrivateToClipboard = menu.add(R.string.pubkey_copy_private);\n            if (!this.pubkey.isEncrypted() || imported) {\n                z = true;\n            } else {\n                z = false;\n            }\n            copyPrivateToClipboard.setEnabled(z);\n            copyPrivateToClipboard.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    try {\n                        String data;\n                        if (imported) {\n                            data = new String(PubkeyViewHolder.this.pubkey.getPrivateKey());\n                        } else {\n                            data = PubkeyUtils.exportPEM(PubkeyUtils.decodePrivate(PubkeyViewHolder.this.pubkey.getPrivateKey(), PubkeyViewHolder.this.pubkey.getType()), null);\n                        }\n                        PubkeyListActivity.this.clipboard.setText(data);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    return true;\n                }\n            });\n            MenuItem changePassword = menu.add(R.string.pubkey_change_password);\n            if (!imported) {\n                z2 = true;\n            }\n            changePassword.setEnabled(z2);\n            changePassword.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    final View changePasswordView = View.inflate(PubkeyListActivity.this, R.layout.dia_changepassword, null);\n                    ((TableRow) changePasswordView.findViewById(R.id.old_password_prompt)).setVisibility(PubkeyViewHolder.this.pubkey.isEncrypted() ? 0 : 8);\n                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setView(changePasswordView).setPositiveButton(R.string.button_change, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            String oldPassword = ((EditText) changePasswordView.findViewById(R.id.old_password)).getText().toString();\n                            String password1 = ((EditText) changePasswordView.findViewById(R.id.password1)).getText().toString();\n                            if (password1.equals(((EditText) changePasswordView.findViewById(R.id.password2)).getText().toString())) {\n                                try {\n                                    if (PubkeyViewHolder.this.pubkey.changePassword(oldPassword, password1)) {\n                                        PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                                        PubkeyListActivity.this.updateList();\n                                        return;\n                                    }\n                                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_wrong_password_msg).setPositiveButton(17039370, null).create().show();\n                                    return;\n                                } catch (Exception e) {\n                                    Log.e(\"CB.PubkeyListActivity\", \"Could not change private key password\", e);\n                                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_key_corrupted_msg).setPositiveButton(17039370, null).create().show();\n                                    return;\n                                }\n                            }\n                            new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_passwords_do_not_match_msg).setPositiveButton(17039370, null).create().show();\n                        }\n                    }).setNegativeButton(17039360, null).create().show();\n                    return true;\n                }\n            });\n            PubkeyListActivity.this.confirmUse = menu.add(R.string.pubkey_confirm_use);\n            PubkeyListActivity.this.confirmUse.setCheckable(true);\n            PubkeyListActivity.this.confirmUse.setChecked(this.pubkey.isConfirmUse());\n            PubkeyListActivity.this.confirmUse.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    PubkeyViewHolder.this.pubkey.setConfirmUse(!PubkeyViewHolder.this.pubkey.isConfirmUse());\n                    PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                    PubkeyListActivity.this.updateList();\n                    return true;\n                }\n            });\n            menu.add(R.string.pubkey_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage(PubkeyListActivity.this.getString(R.string.delete_message, new Object[]{PubkeyViewHolder.this.pubkey.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (loaded) {\n                                PubkeyListActivity.this.bound.removeKey(PubkeyViewHolder.this.pubkey.getNickname());\n                            }\n                            PubkeyDatabase.get(PubkeyListActivity.this).deletePubkey(PubkeyViewHolder.this.pubkey);\n                            PubkeyListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        updateList();\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_pubkeylist);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        registerForContextMenu(this.mListView);\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.pubkey_list_activity_menu, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.add_new_key_icon:\n                startActivity(new Intent(this, GeneratePubkeyActivity.class));\n                return true;\n            case R.id.import_existing_key_icon:\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    private boolean importExistingKey() {\n        Uri sdcard = Uri.fromFile(Environment.getExternalStorageDirectory());\n        String pickerTitle = getString(R.string.pubkey_list_pick);\n        if ((VERSION.SDK_INT &gt;= 19 && importExistingKeyKitKat()) || importExistingKeyOpenIntents(sdcard, pickerTitle) || importExistingKeyAndExplorer(sdcard, pickerTitle) || pickFileSimple()) {\n            return true;\n        }\n        return false;\n    }\n    @TargetApi(19)\n    public boolean importExistingKeyKitKat() {\n        Intent intent = new Intent(\"android.intent.action.OPEN_DOCUMENT\");\n        intent.addCategory(\"android.intent.category.OPENABLE\");\n        intent.setType(\"*/*\");\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean importExistingKeyOpenIntents(Uri sdcard, String pickerTitle) {\n        Intent intent = new Intent(\"org.openintents.action.PICK_FILE\");\n        intent.setData(sdcard);\n        intent.putExtra(\"org.openintents.extra.TITLE\", pickerTitle);\n        intent.putExtra(\"org.openintents.extra.BUTTON_TEXT\", getString(17039370));\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean importExistingKeyAndExplorer(Uri sdcard, String pickerTitle) {\n        Intent intent = new Intent(\"android.intent.action.PICK\");\n        intent.setDataAndType(sdcard, \"vnd.android.cursor.dir/lysesoft.andexplorer.file\");\n        intent.putExtra(\"explorer_title\", pickerTitle);\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean pickFileSimple() {\n        final File sdcard = Environment.getExternalStorageDirectory();\n        Log.d(\"CB.PubkeyListActivity\", sdcard.toString());\n        String state = Environment.getExternalStorageState();\n        if (\"mounted_ro\".equals(state) || \"mounted\".equals(state)) {\n            List&lt;String> names = new LinkedList();\n            if (sdcard.listFiles() != null) {\n                for (File file : sdcard.listFiles()) {\n                    if (!file.isDirectory()) {\n                        names.add(file.getName());\n                    }\n                }\n            }\n            Collections.sort(names);\n            final String[] namesList = (String[]) names.toArray(new String[0]);\n            Log.d(\"CB.PubkeyListActivity\", names.toString());\n            new Builder(this, R.style.AlertDialogTheme).setTitle((int) R.string.pubkey_list_pick).setItems(namesList, new OnClickListener() {\n                public void onClick(DialogInterface arg0, int arg1) {\n                    PubkeyListActivity.this.readKeyFromFile(Uri.fromFile(new File(sdcard, namesList[arg1])));\n                }\n            }).setNegativeButton(17039360, null).create().show();\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_sdcard_absent).setNegativeButton(17039360, null).create().show();\n        }\n        return true;\n    }\n    protected void handleAddKey(final PubkeyBean pubkey) {\n        if (pubkey.isEncrypted()) {\n            View view = View.inflate(this, R.layout.dia_password, null);\n            final EditText passwordField = (EditText) view.findViewById(16908308);\n            new Builder(this, R.style.AlertDialogTheme).setView(view).setPositiveButton(R.string.pubkey_unlock, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    PubkeyListActivity.this.handleAddKey(pubkey, passwordField.getText().toString());\n                }\n            }).setNegativeButton(17039360, null).create().show();\n            return;\n        }\n        handleAddKey(pubkey, null);\n    }\n    protected void handleAddKey(PubkeyBean keybean, String password) {\n        String message;\n        KeyPair pair = null;\n        if (\"IMPORTED\".equals(keybean.getType())) {\n            try {\n                pair = PEMDecoder.decode(new String(keybean.getPrivateKey()).toCharArray(), password);\n            } catch (Exception e) {\n                message = getResources().getString(R.string.pubkey_failed_add, new Object[]{keybean.getNickname()});\n                Log.e(\"CB.PubkeyListActivity\", message, e);\n                Toast.makeText(this, message, 1).show();\n            }\n        } else {\n            try {\n                PrivateKey privKey = PubkeyUtils.decodePrivate(keybean.getPrivateKey(), keybean.getType(), password);\n                PublicKey pubKey = PubkeyUtils.decodePublic(keybean.getPublicKey(), keybean.getType());\n                Log.d(\"CB.PubkeyListActivity\", \"Unlocked key \" + PubkeyUtils.formatKey(pubKey));\n                pair = new KeyPair(pubKey, privKey);\n            } catch (Exception e2) {\n                message = getResources().getString(R.string.pubkey_failed_add, new Object[]{keybean.getNickname()});\n                Log.e(\"CB.PubkeyListActivity\", message, e2);\n                Toast.makeText(this, message, 1).show();\n                return;\n            }\n        }\n        if (pair != null) {\n            Log.d(\"CB.PubkeyListActivity\", String.format(\"Unlocked key '%s'\", new Object[]{keybean.getNickname()}));\n            this.bound.addKey(keybean, pair, true);\n            updateList();\n        }\n    }\n    protected void updateList() {\n        this.pubkeys = PubkeyDatabase.get(this).allPubkeys();\n        this.mAdapter = new PubkeyAdapter(this, this.pubkeys);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent resultData) {\n        super.onActivityResult(requestCode, resultCode, resultData);\n        switch (requestCode) {\n            case 1:\n                if (resultCode == -1 && resultData != null) {\n                    Uri uri = resultData.getData();\n                    if (uri != null) {\n                        try {\n                            readKeyFromFile(uri);\n                            return;\n                        } catch (IllegalArgumentException e) {\n                            Log.e(\"CB.PubkeyListActivity\", \"Couldn't read from picked file\", e);\n                            return;\n                        }\n                    }\n                    String filename = resultData.getDataString();\n                    if (filename != null) {\n                        readKeyFromFile(Uri.parse(filename));\n                        return;\n                    }\n                    return;\n                }\n                return;\n            default:\n                return;\n        }\n    }\n    public static byte[] getBytesFromInputStream(InputStream is, int maxSize) throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        byte[] buffer = new byte[65535];\n        while (true) {\n            int len = is.read(buffer);\n            if (len != -1 && os.size() &lt; maxSize) {\n                os.write(buffer, 0, len);\n            }\n        }\n        if (os.size() &gt;= maxSize) {\n            throw new IOException(\"File was too big\");\n        }\n        os.flush();\n        return os.toByteArray();\n    }\n    private KeyPair readPKCS8Key(byte[] keyData) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(keyData)));\n        try {\n            ByteArrayOutputStream keyBytes = new ByteArrayOutputStream();\n            boolean inKey = false;\n            while (true) {\n                String line = reader.readLine();\n                if (line == null) {\n                    break;\n                } else if (line.equals(\"-----BEGIN PRIVATE KEY-----\")) {\n                    inKey = true;\n                } else if (line.equals(\"-----END PRIVATE KEY-----\")) {\n                    break;\n                } else if (inKey) {\n                    keyBytes.write(line.getBytes(\"US-ASCII\"));\n                }\n            }\n            if (keyBytes.size() &gt; 0) {\n                return PubkeyUtils.recoverKeyPair(Base64.decode(keyBytes.toString().toCharArray()));\n            }\n            return null;\n        } catch (Exception e) {\n            return null;\n        }\n    }\n    private void readKeyFromFile(Uri uri) {\n        PubkeyBean pubkey = new PubkeyBean();\n        pubkey.setNickname(uri.getLastPathSegment());\n        try {\n            byte[] keyData = getBytesFromInputStream(getContentResolver().openInputStream(uri), 32768);\n            KeyPair kp = readPKCS8Key(keyData);\n            if (kp != null) {\n                pubkey.setType(convertAlgorithmName(kp.getPrivate().getAlgorithm()));\n                pubkey.setPrivateKey(kp.getPrivate().getEncoded());\n                pubkey.setPublicKey(kp.getPublic().getEncoded());\n            } else {\n                try {\n                    PEMStructure struct = PEMDecoder.parsePEM(new String(keyData).toCharArray());\n                    boolean encrypted = PEMDecoder.isPEMEncrypted(struct);\n                    pubkey.setEncrypted(encrypted);\n                    if (encrypted) {\n                        pubkey.setType(\"IMPORTED\");\n                        pubkey.setPrivateKey(keyData);\n                    } else {\n                        kp = PEMDecoder.decode(struct, null);\n                        pubkey.setType(convertAlgorithmName(kp.getPrivate().getAlgorithm()));\n                        pubkey.setPrivateKey(kp.getPrivate().getEncoded());\n                        pubkey.setPublicKey(kp.getPublic().getEncoded());\n                    }\n                } catch (IOException e) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Problem parsing imported private key\", e);\n                    Toast.makeText(this, R.string.pubkey_import_parse_problem, 1).show();\n                }\n            }\n            PubkeyDatabase.get(this).savePubkey(pubkey);\n            updateList();\n        } catch (IOException e2) {\n            Toast.makeText(this, R.string.pubkey_import_parse_problem, 1).show();\n        }\n    }\n    private String convertAlgorithmName(String algorithm) {\n        if (\"EdDSA\".equals(algorithm)) {\n            return \"ED25519\";\n        }\n        return algorithm;\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.PubkeyListActivity"},
{"target_layoutcode": "&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\ttools:context=\"org.connectbot.EulaActivity\"\n\t&gt;\n\t&lt;LinearLayout\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:orientation=\"vertical\"\n\t\tandroid:padding=\"10dip\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"ConnectBot is a simple, powerful, open-source Secure Shell (SSH) client for your Android device.\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"It can manage several SSH sessions, create secure tunnels, and copy/paste between other apps.\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:autoLink=\"web\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"@string/copyright_info\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"About and Credits\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:autoLink=\"web\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"Copyright \\u00a9 2007-2008 Kenny Root http://the-b.org, Jeffrey Sharkey http://jsharkey.org\\n\\nBased in part on the Trilead SSH2 client, provided under a BSD-style license.  Copyright \\u00a9 2007 Trilead AG.  http://www.trilead.com\\n\\nAlso based on JTA Telnet/SSH client, provided under the GPLv2 license.  Copyright \\u00a9 Matthias L. Jugel, Marcus Meiner 1996-2005.  http://www.javassh.org\\n\\nAlso based in part on the JSOCKS library, provided under the GNU LGPL license. http://jsocks.sourceforge.net\\n\\nAlso based in part on JZlib provided under a BSD-style license. Copyright \\u00a9 JCraft, Inc., 2000-2004 http://www.jcraft.com\"\n\t\tandroid:textColor=\"#bebebe\"\n\t\t\tandroid:textSize=\"14sp\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"@string/msg_version\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "EulaActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.EulaActivity.png", "methodTargetLink": [], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class EulaActivity extends AppCompatActivity {\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView((int) R.layout.act_eula);\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.EulaActivity"},
{"target_layoutcode": "&lt;ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\ttools:context=\"org.connectbot.HintsActivity\"&gt;\n\t&lt;LinearLayout\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:orientation=\"vertical\"\n\t\tandroid:padding=\"10dip\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/host_shortcuts_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/host_shortcuts_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scroll_hints_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scroll_hints_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_scrollback\"\n\t\t\tandroid:contentDescription=\"@string/scrolling_back\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scrolling_back\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_scrollforward\"\n\t\t\tandroid:contentDescription=\"@string/scrolling_forward\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scrolling_forward\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_updn_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_updn_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_pgup\"\n\t\t\tandroid:contentDescription=\"@string/page_up\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_up\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_pgdn\"\n\t\t\tandroid:contentDescription=\"@string/page_down\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_down\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/switching_hosts_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/switching_hosts_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_hostprev\"\n\t\t\tandroid:contentDescription=\"@string/prev_host\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/prev_host\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_hostnext\"\n\t\t\tandroid:contentDescription=\"@string/next_host\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/next_host\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "HintsActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.HintsActivity.png", "methodTargetLink": [], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class HintsActivity extends AppCompatActivity {\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView((int) R.layout.act_hints);\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.HintsActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/list_host_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_host_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tandroid:tint=\"@android:color/white\"\n\t\tandroid:contentDescription=\"@string/hostpref_add_host\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "HostListActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.HostListActivity.png", "methodTargetLink": [{"source": "onResume", "target": "disconnectAll"}, {"source": "access$100", "target": "disconnectAll"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onMenuItemClick", "target": "access$100"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onClick", "target": "access$002"}, {"source": "onClick", "target": "access$200"}, {"source": "onClick", "target": "access$002"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "onActivityResult", "target": "updateList"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class HostListActivity extends AppCompatListActivity implements OnHostStatusChangedListener {\n    protected TerminalManager bound = null;\n    private boolean closeOnDisconnectAll = true;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            HostListActivity.this.bound = ((TerminalBinder) service).getService();\n            HostListActivity.this.updateList();\n            HostListActivity.this.bound.registerOnHostStatusChangedListener(HostListActivity.this);\n            if (HostListActivity.this.waitingForDisconnectAll) {\n                HostListActivity.this.disconnectAll();\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            HostListActivity.this.bound.unregisterOnHostStatusChangedListener(HostListActivity.this);\n            HostListActivity.this.bound = null;\n            HostListActivity.this.updateList();\n        }\n    };\n    private MenuItem disconnectall;\n    private HostStorage hostdb;\n    private List&lt;HostBean> hosts;\n    protected LayoutInflater inflater = null;\n    protected boolean makingShortcut = false;\n    private SharedPreferences prefs = null;\n    private MenuItem sortcolor;\n    protected boolean sortedByColor = false;\n    private MenuItem sortlast;\n    private boolean waitingForDisconnectAll = false;\n    private class HostAdapter extends ItemAdapter {\n        private final List&lt;HostBean> hosts;\n        private final TerminalManager manager;\n        public HostAdapter(Context context, List&lt;HostBean> hosts, TerminalManager manager) {\n            super(context);\n            this.hosts = hosts;\n            this.manager = manager;\n        }\n        private int getConnectedState(HostBean host) {\n            if (this.manager == null || host == null) {\n                return 1;\n            }\n            if (this.manager.getConnectedBridge(host) != null) {\n                return 2;\n            }\n            if (this.manager.disconnected.contains(host)) {\n                return 3;\n            }\n            return 1;\n        }\n        public HostViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new HostViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_host, parent, false));\n        }\n        @TargetApi(16)\n        private void hideFromAccessibility(View view, boolean hide) {\n            view.setImportantForAccessibility(hide ? 2 : 1);\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            int chosenStyleFirstLine;\n            int chosenStyleSecondLine;\n            HostViewHolder hostHolder = (HostViewHolder) holder;\n            HostBean host = (HostBean) this.hosts.get(position);\n            hostHolder.host = host;\n            if (host == null) {\n                Log.e(\"HostAdapter\", \"Host bean is null!\");\n                hostHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                hostHolder.nickname.setText(host.getNickname());\n            }\n            switch (getConnectedState(host)) {\n                case 1:\n                    hostHolder.icon.setImageState(new int[0], true);\n                    hostHolder.icon.setContentDescription(null);\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, true);\n                        break;\n                    }\n                    break;\n                case 2:\n                    hostHolder.icon.setImageState(new int[]{16842912}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_connected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                case 3:\n                    hostHolder.icon.setImageState(new int[]{16842920}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_disconnected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                default:\n                    Log.e(\"HostAdapter\", \"Unknown host state encountered: \" + getConnectedState(host));\n                    break;\n            }\n            if (\"red\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Red;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Red;\n            } else if (\"green\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Green;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Green;\n            } else if (\"blue\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Blue;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Blue;\n            } else {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText;\n            }\n            hostHolder.nickname.setTextAppearance(this.context, chosenStyleFirstLine);\n            hostHolder.caption.setTextAppearance(this.context, chosenStyleSecondLine);\n            CharSequence nice = this.context.getString(R.string.bind_never);\n            if (host.getLastConnect() &gt; 0) {\n                nice = DateUtils.getRelativeTimeSpanString(host.getLastConnect() * 1000);\n            }\n            hostHolder.caption.setText(nice);\n        }\n        public long getItemId(int position) {\n            return ((HostBean) this.hosts.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.hosts.size();\n        }\n    }\n    public class HostViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public HostBean host;\n        public final ImageView icon;\n        public final TextView nickname;\n        public HostViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            Intent contents = new Intent(\"android.intent.action.VIEW\", this.host.getUri());\n            contents.setFlags(67108864);\n            if (HostListActivity.this.makingShortcut) {\n                ShortcutIconResource icon = ShortcutIconResource.fromContext(HostListActivity.this, R.drawable.icon);\n                Intent intent = new Intent();\n                intent.putExtra(\"android.intent.extra.shortcut.INTENT\", contents);\n                intent.putExtra(\"android.intent.extra.shortcut.NAME\", this.host.getNickname());\n                intent.putExtra(\"android.intent.extra.shortcut.ICON_RESOURCE\", icon);\n                HostListActivity.this.setResult(-1, intent);\n                HostListActivity.this.finish();\n                return;\n            }\n            contents.setClass(HostListActivity.this, ConsoleActivity.class);\n            HostListActivity.this.startActivity(contents);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean z;\n            menu.setHeaderTitle(this.host.getNickname());\n            MenuItem connect = menu.add(R.string.list_host_disconnect);\n            final TerminalBridge bridge = HostListActivity.this.bound == null ? null : HostListActivity.this.bound.getConnectedBridge(this.host);\n            if (bridge != null) {\n                z = true;\n            } else {\n                z = false;\n            }\n            connect.setEnabled(z);\n            connect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    bridge.dispatchDisconnect(true);\n                    return true;\n                }\n            });\n            menu.add(R.string.list_host_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForExistingHost(HostListActivity.this, HostViewHolder.this.host.getId()), 1);\n                    return true;\n                }\n            });\n            MenuItem portForwards = menu.add(R.string.list_host_portforwards);\n            portForwards.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    Intent intent = new Intent(HostListActivity.this, PortForwardListActivity.class);\n                    intent.putExtra(\"android.intent.extra.TITLE\", HostViewHolder.this.host.getId());\n                    HostListActivity.this.startActivityForResult(intent, 1);\n                    return true;\n                }\n            });\n            if (!TransportFactory.canForwardPorts(this.host.getProtocol())) {\n                portForwards.setEnabled(false);\n            }\n            menu.add(R.string.list_host_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(HostListActivity.this, R.style.AlertDialogTheme).setMessage(HostListActivity.this.getString(R.string.delete_message, new Object[]{HostViewHolder.this.host.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (bridge != null) {\n                                bridge.dispatchDisconnect(true);\n                            }\n                            HostListActivity.this.hostdb.deleteHost(HostViewHolder.this.host);\n                            HostListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n        this.closeOnDisconnectAll = true;\n    }\n    public void onResume() {\n        super.onResume();\n        if ((getIntent().getFlags() & 1048576) == 0 && \"org.connectbot.action.DISCONNECT\".equals(getIntent().getAction())) {\n            Log.d(\"CB.HostListActivity\", \"Got disconnect all request\");\n            disconnectAll();\n        }\n        boolean z = this.waitingForDisconnectAll && this.closeOnDisconnectAll;\n        this.closeOnDisconnectAll = z;\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == 1) {\n            updateList();\n        }\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        int i = 0;\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_hostlist);\n        setTitle(R.string.title_hosts_list);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (Build.MANUFACTURER.equals(\"HTC\") && Build.DEVICE.equals(\"dream\")) {\n            Editor editor = this.prefs.edit();\n            boolean doCommit = false;\n            if (!(this.prefs.contains(\"shiftfkeys\") || this.prefs.contains(\"ctrlfkeys\"))) {\n                editor.putBoolean(\"shiftfkeys\", true);\n                editor.putBoolean(\"ctrlfkeys\", true);\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"stickymodifiers\")) {\n                editor.putString(\"stickymodifiers\", \"yes\");\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"keymode\")) {\n                editor.putString(\"keymode\", \"Use right-side keys\");\n                doCommit = true;\n            }\n            if (doCommit) {\n                editor.commit();\n            }\n        }\n        if (\"android.intent.action.CREATE_SHORTCUT\".equals(getIntent().getAction()) || \"android.intent.action.PICK\".equals(getIntent().getAction())) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.makingShortcut = z;\n        this.hostdb = HostDatabase.get(this);\n        this.sortedByColor = this.prefs.getBoolean(\"sortByColor\", false);\n        registerForContextMenu(this.mListView);\n        FloatingActionButton addHostButton = (FloatingActionButton) findViewById(R.id.add_host_button);\n        if (this.makingShortcut) {\n            i = 8;\n        }\n        addHostButton.setVisibility(i);\n        addHostButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForNewHost(HostListActivity.this), 1);\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            boolean z2;\n            MenuItem menuItem = this.sortcolor;\n            if (this.sortedByColor) {\n                z2 = false;\n            } else {\n                z2 = true;\n            }\n            menuItem.setVisible(z2);\n            this.sortlast.setVisible(this.sortedByColor);\n            MenuItem menuItem2 = this.disconnectall;\n            if (this.bound != null && this.bound.getBridges().size() &gt; 0) {\n                z = true;\n            }\n            menuItem2.setEnabled(z);\n        }\n        return true;\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            this.sortcolor = menu.add(R.string.list_menu_sortcolor);\n            this.sortcolor.setIcon(17301586);\n            this.sortcolor.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = true;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            this.sortlast = menu.add(R.string.list_menu_sortname);\n            this.sortlast.setIcon(17301586);\n            this.sortlast.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = false;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem keys = menu.add(R.string.list_menu_pubkeys);\n            keys.setIcon(17301551);\n            keys.setIntent(new Intent(this, PubkeyListActivity.class));\n            MenuItem colors = menu.add(R.string.title_colors);\n            colors.setIcon(17301587);\n            colors.setIntent(new Intent(this, ColorsActivity.class));\n            this.disconnectall = menu.add(R.string.list_menu_disconnect);\n            this.disconnectall.setIcon(17301564);\n            this.disconnectall.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem menuItem) {\n                    HostListActivity.this.disconnectAll();\n                    return false;\n                }\n            });\n            MenuItem settings = menu.add(R.string.list_menu_settings);\n            settings.setIcon(17301577);\n            settings.setIntent(new Intent(this, SettingsActivity.class));\n            MenuItem help = menu.add(R.string.title_help);\n            help.setIcon(17301568);\n            help.setIntent(new Intent(this, HelpActivity.class));\n        }\n        return true;\n    }\n    private void disconnectAll() {\n        if (this.bound == null) {\n            this.waitingForDisconnectAll = true;\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage(getString(R.string.disconnect_all_message)).setPositiveButton(R.string.disconnect_all_pos, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.bound.disconnectAll(true, false);\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                    if (HostListActivity.this.closeOnDisconnectAll) {\n                        HostListActivity.this.finish();\n                    }\n                }\n            }).setNegativeButton(R.string.disconnect_all_neg, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                }\n            }).create().show();\n        }\n    }\n    protected void updateList() {\n        if (this.prefs.getBoolean(\"sortByColor\", false) != this.sortedByColor) {\n            Editor edit = this.prefs.edit();\n            edit.putBoolean(\"sortByColor\", this.sortedByColor);\n            edit.commit();\n        }\n        if (this.hostdb == null) {\n            this.hostdb = HostDatabase.get(this);\n        }\n        this.hosts = this.hostdb.getHosts(this.sortedByColor);\n        if (this.bound != null) {\n            Iterator it = this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                TerminalBridge bridge = (TerminalBridge) it.next();\n                if (!this.hosts.contains(bridge.host)) {\n                    this.hosts.add(0, bridge.host);\n                }\n            }\n        }\n        this.mAdapter = new HostAdapter(this, this.hosts, this.bound);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    public void onHostStatusChanged() {\n        updateList();\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.HostListActivity"},
{"target_layoutcode": "&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:id=\"@+id/fragment_container\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\ttools:context=\"org.connectbot.EditHostActivity\"\n\ttools:ignore=\"MergeRootFrame\" /&gt;\n", "source_fullname": "org.connectbot.ConsoleActivity", "methodSourceLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "target": "EditHostActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.EditHostActivity.png", "methodTargetLink": [{"source": "onCreateOptionsMenu", "target": "setAddSaveButtonEnabled"}, {"source": "onOptionsItemSelected", "target": "attemptSaveAndExit"}, {"source": "onBackPressed", "target": "attemptSaveAndExit"}, {"source": "access$200", "target": "initialize"}, {"source": "createIntentForNewHost", "target": "createIntentForExistingHost"}, {"source": "onStart", "target": "isInitialized"}, {"source": "onStart", "target": "getCharsetData"}, {"source": "onStart", "target": "doInBackground"}, {"source": "doInBackground", "target": "access$200"}, {"source": "doInBackground", "target": "doInBackground"}, {"source": "getCharsetData", "target": "initialize"}, {"source": "ACTIVITY", "target": "onStart"}, {"source": "attemptSaveAndExit", "target": "showDiscardDialog"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "target_actcode": "public class EditHostActivity extends AppCompatActivity implements Listener {\n    private TerminalBridge mBridge;\n    private HostBean mHost;\n    private HostDatabase mHostDb;\n    private boolean mIsCreating;\n    private PubkeyDatabase mPubkeyDb;\n    private MenuItem mSaveHostButton;\n    private ServiceConnection mTerminalConnection;\n    private static class CharsetHolder {\n        private static Map&lt;String, String> mData;\n        private static boolean mInitialized = false;\n        private CharsetHolder() {\n        }\n        public static Map&lt;String, String> getCharsetData() {\n            if (mData == null) {\n                initialize();\n            }\n            return mData;\n        }\n        private static synchronized void initialize() {\n            synchronized (CharsetHolder.class) {\n                if (!mInitialized) {\n                    mData = new HashMap();\n                    for (Entry&lt;String, Charset> entry : Charset.availableCharsets().entrySet()) {\n                        Charset c = (Charset) entry.getValue();\n                        if (c.canEncode() && c.isRegistered()) {\n                            if (((String) entry.getKey()).startsWith(\"cp\")) {\n                                mData.put(\"CP437\", \"CP437\");\n                            }\n                            mData.put(c.displayName(), entry.getKey());\n                        }\n                    }\n                    mInitialized = true;\n                }\n            }\n        }\n        public static boolean isInitialized() {\n            return mInitialized;\n        }\n    }\n    public static Intent createIntentForExistingHost(Context context, long existingHostId) {\n        Intent i = new Intent(context, EditHostActivity.class);\n        i.putExtra(\"org.connectbot.existing_host_id\", existingHostId);\n        return i;\n    }\n    public static Intent createIntentForNewHost(Context context) {\n        return createIntentForExistingHost(context, -1);\n    }\n    protected void onCreate(Bundle savedInstanceState) {\n        HostBean hostBean;\n        int i;\n        super.onCreate(savedInstanceState);\n        this.mHostDb = HostDatabase.get(this);\n        this.mPubkeyDb = PubkeyDatabase.get(this);\n        this.mTerminalConnection = new ServiceConnection() {\n            public void onServiceConnected(ComponentName className, IBinder service) {\n                EditHostActivity.this.mBridge = ((TerminalBinder) service).getService().getConnectedBridge(EditHostActivity.this.mHost);\n            }\n            public void onServiceDisconnected(ComponentName name) {\n                EditHostActivity.this.mBridge = null;\n            }\n        };\n        long hostId = getIntent().getLongExtra(\"org.connectbot.existing_host_id\", -1);\n        this.mIsCreating = hostId == -1;\n        if (this.mIsCreating) {\n            hostBean = null;\n        } else {\n            hostBean = this.mHostDb.findHostById(hostId);\n        }\n        this.mHost = hostBean;\n        ArrayList&lt;String> pubkeyNames = new ArrayList();\n        ArrayList&lt;String> pubkeyValues = new ArrayList();\n        TypedArray defaultPubkeyNames = getResources().obtainTypedArray(R.array.list_pubkeyids);\n        for (i = 0; i &lt; defaultPubkeyNames.length(); i++) {\n            pubkeyNames.add(defaultPubkeyNames.getString(i));\n        }\n        TypedArray defaultPubkeyValues = getResources().obtainTypedArray(R.array.list_pubkeyids_value);\n        for (i = 0; i &lt; defaultPubkeyValues.length(); i++) {\n            pubkeyValues.add(defaultPubkeyValues.getString(i));\n        }\n        for (CharSequence cs : this.mPubkeyDb.allValues(\"nickname\")) {\n            pubkeyNames.add(cs.toString());\n        }\n        for (CharSequence cs2 : this.mPubkeyDb.allValues(\"_id\")) {\n            pubkeyValues.add(cs2.toString());\n        }\n        setContentView((int) R.layout.activity_edit_host);\n        if (((HostEditorFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_container)) == null) {\n            getSupportFragmentManager().beginTransaction().add(R.id.fragment_container, HostEditorFragment.newInstance(this.mHost, pubkeyNames, pubkeyValues)).commit();\n        }\n        defaultPubkeyNames.recycle();\n        defaultPubkeyValues.recycle();\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean z;\n        getMenuInflater().inflate(this.mIsCreating ? R.menu.edit_host_activity_add_menu : R.menu.edit_host_activity_edit_menu, menu);\n        this.mSaveHostButton = menu.getItem(0);\n        if (this.mIsCreating) {\n            z = false;\n        } else {\n            z = true;\n        }\n        setAddSaveButtonEnabled(z);\n        return super.onCreateOptionsMenu(menu);\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n            case R.id.save:\n                attemptSaveAndExit();\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.mTerminalConnection, 1);\n        final HostEditorFragment fragment = (HostEditorFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_container);\n        if (CharsetHolder.isInitialized()) {\n            fragment.setCharsetData(CharsetHolder.getCharsetData());\n        } else {\n            new AsyncTask&lt;Void, Void, Void>() {\n                protected Void doInBackground(Void... unused) {\n                    CharsetHolder.initialize();\n                    return null;\n                }\n                protected void onPostExecute(Void unused) {\n                    fragment.setCharsetData(CharsetHolder.getCharsetData());\n                }\n            }.execute(new Void[0]);\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.mTerminalConnection);\n    }\n    public void onValidHostConfigured(HostBean host) {\n        this.mHost = host;\n        if (this.mSaveHostButton != null) {\n            setAddSaveButtonEnabled(true);\n        }\n    }\n    public void onHostInvalidated() {\n        this.mHost = null;\n        if (this.mSaveHostButton != null) {\n            setAddSaveButtonEnabled(false);\n        }\n    }\n    public void onBackPressed() {\n        attemptSaveAndExit();\n    }\n    private void attemptSaveAndExit() {\n        if (this.mHost == null) {\n            showDiscardDialog();\n            return;\n        }\n        this.mHostDb.saveHost(this.mHost);\n        if (this.mBridge != null) {\n            this.mBridge.setCharset(this.mHost.getEncoding());\n        }\n        finish();\n    }\n    private void showDiscardDialog() {\n        Builder builder = new Builder(this, R.style.AlertDialogTheme);\n        builder.setMessage((int) R.string.discard_host_changes_message).setPositiveButton(R.string.discard_host_button, new OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n                EditHostActivity.this.finish();\n            }\n        }).setNegativeButton(R.string.discard_host_cancel_button, new OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n            }\n        });\n        builder.show();\n    }\n    private void setAddSaveButtonEnabled(boolean enabled) {\n        this.mSaveHostButton.setEnabled(enabled);\n        this.mSaveHostButton.getIcon().setAlpha(enabled ? 255 : 130);\n    }\n}\n", "source": "ConsoleActivity", "source_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "type": "suit", "target_fullname": "org.connectbot.EditHostActivity"},
{"target_layoutcode": "&lt;ScrollView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\"\n\ttools:context=\"org.connectbot.HintsActivity\"&gt;\n\t&lt;LinearLayout\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:orientation=\"vertical\"\n\t\tandroid:padding=\"10dip\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/host_shortcuts_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/host_shortcuts_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scroll_hints_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scroll_hints_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_scrollback\"\n\t\t\tandroid:contentDescription=\"@string/scrolling_back\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scrolling_back\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_scrollforward\"\n\t\t\tandroid:contentDescription=\"@string/scrolling_forward\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/scrolling_forward\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_updn_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_updn_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_pgup\"\n\t\t\tandroid:contentDescription=\"@string/page_up\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_up\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_pgdn\"\n\t\t\tandroid:contentDescription=\"@string/page_down\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/page_down\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/switching_hosts_header\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceLarge\"\n\t\t\tandroid:layout_marginTop=\"10dp\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/switching_hosts_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:layout_marginTop=\"5dp\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_hostprev\"\n\t\t\tandroid:contentDescription=\"@string/prev_host\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/prev_host\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t\t&lt;ImageView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:src=\"@drawable/gesture_hostnext\"\n\t\t\tandroid:contentDescription=\"@string/next_host\"\n\t\t\tandroid:layout_marginTop=\"10dp\"\n\t\t\tandroid:layout_gravity=\"center_horizontal\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/next_host\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\tandroid:layout_marginBottom=\"5dp\"\n\t\t\tandroid:gravity=\"center_horizontal\"/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>\n", "source_fullname": "org.connectbot.HelpActivity", "methodSourceLink": [{"source": "onClick", "target": "access$000"}], "target": "HintsActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.HintsActivity.png", "methodTargetLink": [], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:layout_weight=\"1\"\n\t&gt;\n\t&lt;LinearLayout\n\t\tandroid:id=\"@+id/topics\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:gravity=\"center_horizontal\"\n\t\tandroid:orientation=\"vertical\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"end\"\n\t\t\tandroid:paddingRight=\"2dip\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/msg_version\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"center_horizontal\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/help_intro\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/hints_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/hints\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/shortcuts_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/keyboard_shortcuts\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/eula_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/terms_and_conditions\"/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>\n", "target_actcode": "public class HintsActivity extends AppCompatActivity {\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView((int) R.layout.act_hints);\n    }\n}\n", "source": "HelpActivity", "source_actcode": "public class HelpActivity extends AppCompatActivity {\n    private LayoutInflater inflater = null;\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_help);\n        ((Button) findViewById(R.id.hints_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, HintsActivity.class));\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n        ((Button) findViewById(R.id.shortcuts_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                new Builder(HelpActivity.this, R.style.AlertDialogTheme).setView(HelpActivity.this.inflater.inflate(R.layout.dia_keyboard_shortcuts, null, false)).setTitle((int) R.string.keyboard_shortcuts).show();\n            }\n        });\n        ((Button) findViewById(R.id.eula_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, EulaActivity.class));\n            }\n        });\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.HelpActivity.png", "type": "suit", "target_fullname": "org.connectbot.HintsActivity"},
{"target_layoutcode": "&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\ttools:context=\"org.connectbot.EulaActivity\"\n\t&gt;\n\t&lt;LinearLayout\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:orientation=\"vertical\"\n\t\tandroid:padding=\"10dip\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"ConnectBot is a simple, powerful, open-source Secure Shell (SSH) client for your Android device.\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"It can manage several SSH sessions, create secure tunnels, and copy/paste between other apps.\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:autoLink=\"web\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"@string/copyright_info\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"About and Credits\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:autoLink=\"web\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"Copyright \\u00a9 2007-2008 Kenny Root http://the-b.org, Jeffrey Sharkey http://jsharkey.org\\n\\nBased in part on the Trilead SSH2 client, provided under a BSD-style license.  Copyright \\u00a9 2007 Trilead AG.  http://www.trilead.com\\n\\nAlso based on JTA Telnet/SSH client, provided under the GPLv2 license.  Copyright \\u00a9 Matthias L. Jugel, Marcus Meiner 1996-2005.  http://www.javassh.org\\n\\nAlso based in part on the JSOCKS library, provided under the GNU LGPL license. http://jsocks.sourceforge.net\\n\\nAlso based in part on JZlib provided under a BSD-style license. Copyright \\u00a9 JCraft, Inc., 2000-2004 http://www.jcraft.com\"\n\t\tandroid:textColor=\"#bebebe\"\n\t\t\tandroid:textSize=\"14sp\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:paddingTop=\"10dip\"\n\t\t\tandroid:text=\"@string/msg_version\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>", "source_fullname": "org.connectbot.HelpActivity", "methodSourceLink": [{"source": "onClick", "target": "access$000"}], "target": "EulaActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.EulaActivity.png", "methodTargetLink": [], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:layout_weight=\"1\"\n\t&gt;\n\t&lt;LinearLayout\n\t\tandroid:id=\"@+id/topics\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:gravity=\"center_horizontal\"\n\t\tandroid:orientation=\"vertical\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"end\"\n\t\t\tandroid:paddingRight=\"2dip\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/msg_version\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"center_horizontal\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/help_intro\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/hints_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/hints\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/shortcuts_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/keyboard_shortcuts\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/eula_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/terms_and_conditions\"/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>\n", "target_actcode": "public class EulaActivity extends AppCompatActivity {\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView((int) R.layout.act_eula);\n    }\n}\n", "source": "HelpActivity", "source_actcode": "public class HelpActivity extends AppCompatActivity {\n    private LayoutInflater inflater = null;\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_help);\n        ((Button) findViewById(R.id.hints_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, HintsActivity.class));\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n        ((Button) findViewById(R.id.shortcuts_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                new Builder(HelpActivity.this, R.style.AlertDialogTheme).setView(HelpActivity.this.inflater.inflate(R.layout.dia_keyboard_shortcuts, null, false)).setTitle((int) R.string.keyboard_shortcuts).show();\n            }\n        });\n        ((Button) findViewById(R.id.eula_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, EulaActivity.class));\n            }\n        });\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.HelpActivity.png", "type": "suit", "target_fullname": "org.connectbot.EulaActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:scrollbars=\"vertical\"&gt;\n\t&lt;TableLayout\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:orientation=\"vertical\"\n\t\tandroid:paddingLeft=\"10dip\"\n\t\tandroid:paddingRight=\"10dip\"\n\t\tandroid:scrollbars=\"vertical\"&gt;\n\t\t&lt;TableRow>\n\t\t\t&lt;TextView\n\t\t\t\tandroid:gravity=\"end|center_vertical\"\n\t\t\t\tandroid:paddingRight=\"10dip\"\n\t\t\t\tandroid:text=\"@string/prompt_nickname\"\n\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t\t\t&lt;EditText\n\t\t\t\tandroid:id=\"@+id/nickname\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:layout_weight=\"1\"\n\t\t\t\tandroid:hint=\"@string/prompt_nickname_hint_pubkey\"\n\t\t\t\tandroid:singleLine=\"true\"/&gt;\n\t\t&lt;/TableRow>\n\t\t&lt;TableRow android:focusable=\"false\">\n\t\t\t&lt;TextView\n\t\t\t\tandroid:layout_gravity=\"center_vertical\"\n\t\t\t\tandroid:gravity=\"bottom|end\"\n\t\t\t\tandroid:paddingRight=\"10dip\"\n\t\t\t\tandroid:text=\"@string/prompt_type\"\n\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t\t\t&lt;RadioGroup\n\t\t\t\tandroid:id=\"@+id/key_type\"\n\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:checkedButton=\"@+id/rsa\"\n\t\t\t\tandroid:orientation=\"vertical\"&gt;\n\t\t\t\t&lt;RadioButton\n\t\t\t\t\tandroid:id=\"@+id/rsa\"\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:paddingRight=\"3dip\"\n\t\t\t\t\tandroid:text=\"RSA\"/&gt;\n\t\t\t\t&lt;RadioButton\n\t\t\t\t\tandroid:id=\"@+id/dsa\"\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:paddingRight=\"3dip\"\n\t\t\t\t\tandroid:text=\"DSA\"/&gt;\n\t\t\t\t&lt;RadioButton\n\t\t\t\t\tandroid:id=\"@+id/ec\"\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:text=\"EC\"/&gt;\n\t\t\t\t&lt;RadioButton\n\t\t\t\t\tandroid:id=\"@+id/ed25519\"\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:text=\"Ed25519\"/&gt;\n\t\t\t&lt;/RadioGroup>\n\t\t&lt;/TableRow>\n\t\t&lt;TableRow>\n\t\t\t&lt;TextView\n\t\t\t\tandroid:gravity=\"end|center_vertical\"\n\t\t\t\tandroid:paddingRight=\"10dip\"\n\t\t\t\tandroid:text=\"@string/prompt_bits\"\n\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t\t\t&lt;EditText\n\t\t\t\tandroid:id=\"@+id/bits\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:layout_weight=\"1\"\n\t\t\t\tandroid:inputType=\"number\"\n\t\t\t\tandroid:singleLine=\"true\"\n\t\t\t\tandroid:text=\"1024\"/&gt;\n\t\t&lt;/TableRow>\n\t\t&lt;SeekBar\n\t\t\tandroid:id=\"@+id/bits_slider\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:max=\"3328\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:progress=\"2048\"/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"start\"\n\t\t\tandroid:text=\"@string/prompt_password_can_be_blank\"/&gt;\n\t\t&lt;TableRow>\n\t\t\t&lt;TextView\n\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:gravity=\"end|center_vertical\"\n\t\t\t\tandroid:paddingRight=\"10dip\"\n\t\t\t\tandroid:text=\"@string/prompt_password\"\n\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t\t\t&lt;EditText\n\t\t\t\tandroid:id=\"@+id/password1\"\n\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:layout_weight=\"1\"\n\t\t\t\tandroid:inputType=\"textPassword\"\n\t\t\t\tandroid:singleLine=\"true\"/&gt;\n\t\t&lt;/TableRow>\n\t\t&lt;TableRow android:paddingBottom=\"6dip\">\n\t\t\t&lt;LinearLayout\n\t\t\t\tandroid:gravity=\"end|center_vertical\"\n\t\t\t\tandroid:orientation=\"vertical\"\n\t\t\t\tandroid:paddingRight=\"10dip\"&gt;\n\t\t\t\t&lt;TextView\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:gravity=\"end|bottom\"\n\t\t\t\t\tandroid:text=\"@string/prompt_password\"\n\t\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t\t\t\t&lt;TextView\n\t\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\t\tandroid:gravity=\"end|top\"\n\t\t\t\t\tandroid:text=\"@string/prompt_again\"\n\t\t\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"/&gt;\n\t\t\t&lt;/LinearLayout>\n\t\t\t&lt;EditText\n\t\t\t\tandroid:id=\"@+id/password2\"\n\t\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\t\tandroid:layout_weight=\"1\"\n\t\t\t\tandroid:inputType=\"textPassword\"\n\t\t\t\tandroid:singleLine=\"true\"/&gt;\n\t\t&lt;/TableRow>\n\t\t&lt;CheckBox\n\t\t\tandroid:id=\"@+id/unlock_at_startup\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/pubkey_load_on_start\"/&gt;\n\t\t&lt;CheckBox\n\t\t\tandroid:id=\"@+id/confirm_use\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/pubkey_confirm_use\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/save\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginTop=\"6dip\"\n\t\t\tandroid:enabled=\"false\"\n\t\t\tandroid:text=\"@string/pubkey_generate\"/&gt;\n\t&lt;/TableLayout>\n&lt;/ScrollView>\n", "source_fullname": "org.connectbot.PubkeyListActivity", "methodSourceLink": [{"source": "readKeyFromFile", "target": "readPKCS8Key"}, {"source": "readKeyFromFile", "target": "convertAlgorithmName"}, {"source": "readKeyFromFile", "target": "updateList"}, {"source": "readKeyFromFile", "target": "getBytesFromInputStream"}, {"source": "onStart", "target": "updateList"}, {"source": "importExistingKey", "target": "importExistingKeyKitKat"}, {"source": "importExistingKey", "target": "importExistingKeyOpenIntents"}, {"source": "importExistingKey", "target": "importExistingKeyAndExplorer"}, {"source": "importExistingKey", "target": "pickFileSimple"}, {"source": "access$100", "target": "readKeyFromFile"}, {"source": "onClick", "target": "access$100"}, {"source": "ACTIVITY", "target": "onStart"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "onOptionsItemSelected", "target": "importExistingKey"}, {"source": "onActivityResult", "target": "readKeyFromFile"}], "target": "GeneratePubkeyActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.GeneratePubkeyActivity.png", "methodTargetLink": [{"source": "access$300", "target": "setBits"}, {"source": "onStopTrackingTouch", "target": "access$300"}, {"source": "onStopTrackingTouch", "target": "access$400"}, {"source": "setKeyType", "target": "resetBitDefaults"}, {"source": "setKeyType", "target": "setAllowBitStrengthChange"}, {"source": "onCheckedChanged", "target": "access$100"}, {"source": "access$700", "target": "startEntropyGather"}, {"source": "onFocusChange", "target": "access$200"}, {"source": "onFocusChange", "target": "access$300"}, {"source": "onFocusChange", "target": "access$500"}, {"source": "access$100", "target": "setKeyType"}, {"source": "onProgressChanged", "target": "access$200"}, {"source": "onProgressChanged", "target": "access$300"}, {"source": "resetBitDefaults", "target": "setBits"}, {"source": "onClick", "target": "access$600"}, {"source": "onClick", "target": "access$700"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "onCreate", "target": "setKeyType"}, {"source": "setBits", "target": "getClosestFieldSize"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/pubkey_list_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n&lt;/LinearLayout>\n", "target_actcode": "public class GeneratePubkeyActivity extends AppCompatActivity implements OnEntropyGatheredListener, OnKeyGeneratedListener {\n    private static final int[] ECDSA_SIZES = ECDSASHA2Verify.getCurveSizes();\n    private int bits;\n    private SeekBar bitsSlider;\n    private EditText bitsText;\n    private CheckBox confirmUse;\n    private byte[] entropy;\n    private LayoutInflater inflater = null;\n    private KeyType keyType;\n    private OnKeyGeneratedListener listener;\n    private EditText nickname;\n    private EditText password1;\n    private EditText password2;\n    private ProgressDialog progress;\n    private Button save;\n    private final TextWatcher textChecker = new TextWatcher() {\n        public void afterTextChanged(Editable s) {\n        }\n        public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n        }\n        public void onTextChanged(CharSequence s, int start, int before, int count) {\n            GeneratePubkeyActivity.this.checkEntries();\n        }\n    };\n    private CheckBox unlockAtStartup;\n    private static class KeyGeneratorRunnable implements Runnable {\n        private final byte[] entropy;\n        private final String keyType;\n        private final OnKeyGeneratedListener listener;\n        private final int numBits;\n        KeyGeneratorRunnable(String keyType, int numBits, byte[] entropy, OnKeyGeneratedListener listener) {\n            this.keyType = keyType;\n            this.numBits = numBits;\n            this.entropy = entropy;\n            this.listener = listener;\n        }\n        public void run() {\n            SecureRandom random = new SecureRandom();\n            random.nextInt();\n            random.setSeed(this.entropy);\n            try {\n                KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(this.keyType);\n                keyPairGen.initialize(this.numBits, random);\n                this.listener.onGenerationSuccess(keyPairGen.generateKeyPair());\n            } catch (Exception e) {\n                this.listener.onGenerationError(e);\n            }\n        }\n    }\n    private enum KeyType {\n        RSA(\"RSA\", 1024, 16384, 2048),\n        DSA(\"DSA\", 1024, 1024, 1024),\n        EC(\"EC\", GeneratePubkeyActivity.ECDSA_SIZES[0], GeneratePubkeyActivity.ECDSA_SIZES[GeneratePubkeyActivity.ECDSA_SIZES.length - 1], GeneratePubkeyActivity.ECDSA_SIZES[0]),\n        ED25519(\"ED25519\", 256, 256, 256);\n        public final int defaultBits;\n        public final int maximumBits;\n        public final int minimumBits;\n        public final String name;\n        private KeyType(String name, int minimumBits, int maximumBits, int defaultBits) {\n            this.name = name;\n            this.minimumBits = minimumBits;\n            this.maximumBits = maximumBits;\n            this.defaultBits = defaultBits;\n        }\n    }\n    static {\n        Ed25519Provider.insertIfNeeded();\n    }\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_generatepubkey);\n        this.nickname = (EditText) findViewById(R.id.nickname);\n        RadioGroup keyTypeGroup = (RadioGroup) findViewById(R.id.key_type);\n        this.bitsText = (EditText) findViewById(R.id.bits);\n        this.bitsSlider = (SeekBar) findViewById(R.id.bits_slider);\n        this.password1 = (EditText) findViewById(R.id.password1);\n        this.password2 = (EditText) findViewById(R.id.password2);\n        this.unlockAtStartup = (CheckBox) findViewById(R.id.unlock_at_startup);\n        this.confirmUse = (CheckBox) findViewById(R.id.confirm_use);\n        this.save = (Button) findViewById(R.id.save);\n        this.inflater = LayoutInflater.from(this);\n        this.nickname.addTextChangedListener(this.textChecker);\n        this.password1.addTextChangedListener(this.textChecker);\n        this.password2.addTextChangedListener(this.textChecker);\n        setKeyType(KeyType.RSA);\n        if (Security.getProviders(\"KeyPairGenerator.EC\") == null) {\n            ((RadioButton) findViewById(R.id.ec)).setEnabled(false);\n        }\n        keyTypeGroup.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n            public void onCheckedChanged(RadioGroup group, int checkedId) {\n                if (checkedId == R.id.rsa) {\n                    GeneratePubkeyActivity.this.setKeyType(KeyType.RSA);\n                } else if (checkedId == R.id.dsa) {\n                    GeneratePubkeyActivity.this.setKeyType(KeyType.DSA);\n                } else if (checkedId == R.id.ec) {\n                    GeneratePubkeyActivity.this.setKeyType(KeyType.EC);\n                } else if (checkedId == R.id.ed25519) {\n                    GeneratePubkeyActivity.this.setKeyType(KeyType.ED25519);\n                }\n            }\n        });\n        this.bitsSlider.setOnSeekBarChangeListener(new OnSeekBarChangeListener() {\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromTouch) {\n                GeneratePubkeyActivity.this.setBits(GeneratePubkeyActivity.this.keyType.minimumBits + progress);\n            }\n            public void onStartTrackingTouch(SeekBar seekBar) {\n            }\n            public void onStopTrackingTouch(SeekBar seekBar) {\n                GeneratePubkeyActivity.this.setBits(GeneratePubkeyActivity.this.bits);\n            }\n        });\n        this.bitsText.setOnFocusChangeListener(new OnFocusChangeListener() {\n            public void onFocusChange(View v, boolean hasFocus) {\n                if (!hasFocus) {\n                    int newBits;\n                    try {\n                        newBits = Integer.parseInt(GeneratePubkeyActivity.this.bitsText.getText().toString());\n                    } catch (NumberFormatException e) {\n                        newBits = GeneratePubkeyActivity.this.keyType.defaultBits;\n                    }\n                    GeneratePubkeyActivity.this.setBits(newBits);\n                }\n            }\n        });\n        this.save.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                GeneratePubkeyActivity.this.save.setEnabled(false);\n                GeneratePubkeyActivity.this.startEntropyGather();\n            }\n        });\n    }\n    private void setKeyType(KeyType newKeyType) {\n        this.keyType = newKeyType;\n        resetBitDefaults();\n        switch (newKeyType) {\n            case RSA:\n            case EC:\n                setAllowBitStrengthChange(true);\n                return;\n            case DSA:\n            case ED25519:\n                setAllowBitStrengthChange(false);\n                return;\n            default:\n                throw new AssertionError(\"Impossible key type encountered\");\n        }\n    }\n    private void setAllowBitStrengthChange(boolean enabled) {\n        this.bitsSlider.setEnabled(enabled);\n        this.bitsText.setEnabled(enabled);\n    }\n    private void resetBitDefaults() {\n        this.bitsSlider.setMax(this.keyType.maximumBits - this.keyType.minimumBits);\n        setBits(this.keyType.defaultBits);\n    }\n    private void setBits(int newBits) {\n        if (newBits &lt; this.keyType.minimumBits || newBits > this.keyType.maximumBits) {\n            newBits = this.keyType.defaultBits;\n        }\n        if (this.keyType == KeyType.EC) {\n            this.bits = getClosestFieldSize(newBits);\n        } else {\n            this.bits = newBits - (newBits % 8);\n        }\n        this.bitsSlider.setProgress(newBits - this.keyType.minimumBits);\n        this.bitsText.setText(String.valueOf(this.bits));\n    }\n    private void checkEntries() {\n        boolean allowSave = true;\n        if (!this.password1.getText().toString().equals(this.password2.getText().toString())) {\n            allowSave = false;\n        }\n        if (this.nickname.getText().length() == 0) {\n            allowSave = false;\n        }\n        if (allowSave) {\n            this.save.getBackground().setColorFilter(getResources().getColor(R.color.accent), Mode.SRC_IN);\n        } else {\n            this.save.getBackground().setColorFilter(null);\n        }\n        this.save.setEnabled(allowSave);\n    }\n    private void startEntropyGather() {\n        View entropyView = this.inflater.inflate(R.layout.dia_gatherentropy, null, false);\n        ((EntropyView) entropyView.findViewById(R.id.entropy)).addOnEntropyGatheredListener(this);\n        new EntropyDialog(this, entropyView).show();\n    }\n    public void onEntropyGathered(byte[] entropy) {\n        if (entropy == null) {\n            finish();\n            return;\n        }\n        this.entropy = (byte[]) entropy.clone();\n        int numSetBits = 0;\n        for (int i = 0; i &lt; 20; i++) {\n            numSetBits += measureNumberOfSetBits(this.entropy[i]);\n        }\n        Log.d(\"CB.GeneratePubkeyAct\", \"Entropy gathered; population of ones is \" + ((int) (100.0d * (((double) numSetBits) / 160.0d))) + \"%\");\n        startKeyGen();\n    }\n    private void startKeyGen() {\n        this.progress = new ProgressDialog(this);\n        this.progress.setMessage(getResources().getText(R.string.pubkey_generating));\n        this.progress.setIndeterminate(true);\n        this.progress.setCancelable(false);\n        this.progress.show();\n        Log.d(\"CB.GeneratePubkeyAct\", \"Starting generation of \" + this.keyType + \" of strength \" + this.bits);\n        Thread keyGenThread = new Thread(new KeyGeneratorRunnable(this.keyType.name, this.bits, this.entropy, this));\n        keyGenThread.setName(\"KeyGen \" + this.keyType + \" \" + this.bits);\n        keyGenThread.start();\n    }\n    public void onGenerationSuccess(KeyPair pair) {\n        boolean encrypted = false;\n        try {\n            PrivateKey priv = pair.getPrivate();\n            PublicKey pub = pair.getPublic();\n            String secret = this.password1.getText().toString();\n            if (secret.length() &gt; 0) {\n                encrypted = true;\n            }\n            Log.d(\"CB.GeneratePubkeyAct\", \"public: \" + PubkeyUtils.formatKey(pub));\n            PubkeyBean pubkey = new PubkeyBean();\n            pubkey.setNickname(this.nickname.getText().toString());\n            pubkey.setType(this.keyType.name);\n            pubkey.setPrivateKey(PubkeyUtils.getEncodedPrivate(priv, secret));\n            pubkey.setPublicKey(pub.getEncoded());\n            pubkey.setEncrypted(encrypted);\n            pubkey.setStartup(this.unlockAtStartup.isChecked());\n            pubkey.setConfirmUse(this.confirmUse.isChecked());\n            PubkeyDatabase.get(this).savePubkey(pubkey);\n        } catch (Exception e) {\n            Log.e(\"CB.GeneratePubkeyAct\", \"Could not generate key pair\");\n            e.printStackTrace();\n        }\n        if (this.listener != null) {\n            this.listener.onGenerationSuccess(pair);\n        }\n        dismissActivity();\n    }\n    public void onGenerationError(Exception e) {\n        Log.e(\"CB.GeneratePubkeyAct\", \"Could not generate key pair\");\n        e.printStackTrace();\n        if (this.listener != null) {\n            this.listener.onGenerationError(e);\n        }\n        dismissActivity();\n    }\n    private void dismissActivity() {\n        runOnUiThread(new Runnable() {\n            public void run() {\n                GeneratePubkeyActivity.this.progress.dismiss();\n                GeneratePubkeyActivity.this.finish();\n            }\n        });\n    }\n    private int measureNumberOfSetBits(byte b) {\n        int numSetBits = 0;\n        for (int i = 0; i &lt; 8; i++) {\n            if ((b & 1) == 1) {\n                numSetBits++;\n            }\n            b = (byte) (b &gt;&gt; 1);\n        }\n        return numSetBits;\n    }\n    private int getClosestFieldSize(int bits) {\n        int outBits = ECDSA_SIZES[0];\n        int distance = Math.abs(bits - outBits);\n        for (int i = 1; i &lt; ECDSA_SIZES.length; i++) {\n            int thisDistance = Math.abs(bits - ECDSA_SIZES[i]);\n            if (thisDistance &lt; distance) {\n                distance = thisDistance;\n                outBits = ECDSA_SIZES[i];\n            }\n        }\n        return outBits;\n    }\n}\n", "source": "PubkeyListActivity", "source_actcode": "public class PubkeyListActivity extends AppCompatListActivity implements EventListener {\n    private TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private MenuItem confirmUse = null;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            PubkeyListActivity.this.bound = ((TerminalBinder) service).getService();\n            PubkeyListActivity.this.updateList();\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            PubkeyListActivity.this.bound = null;\n            PubkeyListActivity.this.updateList();\n        }\n    };\n    private LayoutInflater inflater = null;\n    private MenuItem onstartToggle = null;\n    private List&lt;PubkeyBean> pubkeys;\n    private class PubkeyAdapter extends ItemAdapter {\n        private final List&lt;PubkeyBean> pubkeys;\n        public PubkeyAdapter(Context context, List&lt;PubkeyBean> pubkeys) {\n            super(context);\n            this.pubkeys = pubkeys;\n        }\n        public PubkeyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new PubkeyViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_pubkey, parent, false));\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            PubkeyViewHolder pubkeyHolder = (PubkeyViewHolder) holder;\n            PubkeyBean pubkey = (PubkeyBean) this.pubkeys.get(position);\n            pubkeyHolder.pubkey = pubkey;\n            if (pubkey == null) {\n                Log.e(\"PubkeyAdapter\", \"Pubkey bean is null!\");\n                pubkeyHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                pubkeyHolder.nickname.setText(pubkey.getNickname());\n            }\n            if (\"IMPORTED\".equals(pubkey.getType())) {\n                try {\n                    String type;\n                    PEMStructure struct = PEMDecoder.parsePEM(new String(pubkey.getPrivateKey()).toCharArray());\n                    if (struct.pemType == 1) {\n                        type = \"RSA\";\n                    } else if (struct.pemType == 2) {\n                        type = \"DSA\";\n                    } else if (struct.pemType == 3) {\n                        type = \"EC\";\n                    } else if (struct.pemType == 4) {\n                        type = \"OpenSSH\";\n                    } else {\n                        throw new RuntimeException(\"Unexpected key type: \" + struct.pemType);\n                    }\n                    pubkeyHolder.caption.setText(String.format(\"%s unknown-bit\", new Object[]{type}));\n                } catch (IOException e) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Error decoding IMPORTED public key at \" + pubkey.getId(), e);\n                }\n            } else {\n                try {\n                    pubkeyHolder.caption.setText(pubkey.getDescription(PubkeyListActivity.this.getApplicationContext()));\n                } catch (Exception e2) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Error decoding public key at \" + pubkey.getId(), e2);\n                    pubkeyHolder.caption.setText(R.string.pubkey_unknown_format);\n                }\n            }\n            if (PubkeyListActivity.this.bound == null) {\n                pubkeyHolder.icon.setVisibility(8);\n                return;\n            }\n            pubkeyHolder.icon.setVisibility(0);\n            if (PubkeyListActivity.this.bound.isKeyLoaded(pubkey.getNickname())) {\n                pubkeyHolder.icon.setImageState(new int[]{16842912}, true);\n                return;\n            }\n            pubkeyHolder.icon.setImageState(new int[0], true);\n        }\n        public int getItemCount() {\n            return this.pubkeys.size();\n        }\n        public long getItemId(int position) {\n            return ((PubkeyBean) this.pubkeys.get(position)).getId();\n        }\n    }\n    public class PubkeyViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public final ImageView icon;\n        public final TextView nickname;\n        public PubkeyBean pubkey;\n        public PubkeyViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            boolean loaded = PubkeyListActivity.this.bound != null && PubkeyListActivity.this.bound.isKeyLoaded(this.pubkey.getNickname());\n            if (loaded) {\n                PubkeyListActivity.this.bound.removeKey(this.pubkey.getNickname());\n                PubkeyListActivity.this.updateList();\n                return;\n            }\n            PubkeyListActivity.this.handleAddKey(this.pubkey);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean loaded;\n            boolean z;\n            boolean z2 = false;\n            menu.setHeaderTitle(this.pubkey.getNickname());\n            final boolean imported = \"IMPORTED\".equals(this.pubkey.getType());\n            if (PubkeyListActivity.this.bound == null || !PubkeyListActivity.this.bound.isKeyLoaded(this.pubkey.getNickname())) {\n                loaded = false;\n            } else {\n                loaded = true;\n            }\n            menu.add(loaded ? R.string.pubkey_memory_unload : R.string.pubkey_memory_load).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    if (loaded) {\n                        PubkeyListActivity.this.bound.removeKey(PubkeyViewHolder.this.pubkey.getNickname());\n                        PubkeyListActivity.this.updateList();\n                    } else {\n                        PubkeyListActivity.this.handleAddKey(PubkeyViewHolder.this.pubkey);\n                    }\n                    return true;\n                }\n            });\n            PubkeyListActivity.this.onstartToggle = menu.add(R.string.pubkey_load_on_start);\n            MenuItem access$200 = PubkeyListActivity.this.onstartToggle;\n            if (this.pubkey.isEncrypted()) {\n                z = false;\n            } else {\n                z = true;\n            }\n            access$200.setEnabled(z);\n            PubkeyListActivity.this.onstartToggle.setCheckable(true);\n            PubkeyListActivity.this.onstartToggle.setChecked(this.pubkey.isStartup());\n            PubkeyListActivity.this.onstartToggle.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    PubkeyViewHolder.this.pubkey.setStartup(!PubkeyViewHolder.this.pubkey.isStartup());\n                    PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                    PubkeyListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem copyPublicToClipboard = menu.add(R.string.pubkey_copy_public);\n            if (imported) {\n                z = false;\n            } else {\n                z = true;\n            }\n            copyPublicToClipboard.setEnabled(z);\n            copyPublicToClipboard.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    try {\n                        PubkeyListActivity.this.clipboard.setText(PubkeyUtils.convertToOpenSSHFormat(PubkeyUtils.decodePublic(PubkeyViewHolder.this.pubkey.getPublicKey(), PubkeyViewHolder.this.pubkey.getType()), PubkeyViewHolder.this.pubkey.getNickname()));\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    return true;\n                }\n            });\n            MenuItem copyPrivateToClipboard = menu.add(R.string.pubkey_copy_private);\n            if (!this.pubkey.isEncrypted() || imported) {\n                z = true;\n            } else {\n                z = false;\n            }\n            copyPrivateToClipboard.setEnabled(z);\n            copyPrivateToClipboard.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    try {\n                        String data;\n                        if (imported) {\n                            data = new String(PubkeyViewHolder.this.pubkey.getPrivateKey());\n                        } else {\n                            data = PubkeyUtils.exportPEM(PubkeyUtils.decodePrivate(PubkeyViewHolder.this.pubkey.getPrivateKey(), PubkeyViewHolder.this.pubkey.getType()), null);\n                        }\n                        PubkeyListActivity.this.clipboard.setText(data);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                    return true;\n                }\n            });\n            MenuItem changePassword = menu.add(R.string.pubkey_change_password);\n            if (!imported) {\n                z2 = true;\n            }\n            changePassword.setEnabled(z2);\n            changePassword.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    final View changePasswordView = View.inflate(PubkeyListActivity.this, R.layout.dia_changepassword, null);\n                    ((TableRow) changePasswordView.findViewById(R.id.old_password_prompt)).setVisibility(PubkeyViewHolder.this.pubkey.isEncrypted() ? 0 : 8);\n                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setView(changePasswordView).setPositiveButton(R.string.button_change, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            String oldPassword = ((EditText) changePasswordView.findViewById(R.id.old_password)).getText().toString();\n                            String password1 = ((EditText) changePasswordView.findViewById(R.id.password1)).getText().toString();\n                            if (password1.equals(((EditText) changePasswordView.findViewById(R.id.password2)).getText().toString())) {\n                                try {\n                                    if (PubkeyViewHolder.this.pubkey.changePassword(oldPassword, password1)) {\n                                        PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                                        PubkeyListActivity.this.updateList();\n                                        return;\n                                    }\n                                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_wrong_password_msg).setPositiveButton(17039370, null).create().show();\n                                    return;\n                                } catch (Exception e) {\n                                    Log.e(\"CB.PubkeyListActivity\", \"Could not change private key password\", e);\n                                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_key_corrupted_msg).setPositiveButton(17039370, null).create().show();\n                                    return;\n                                }\n                            }\n                            new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_passwords_do_not_match_msg).setPositiveButton(17039370, null).create().show();\n                        }\n                    }).setNegativeButton(17039360, null).create().show();\n                    return true;\n                }\n            });\n            PubkeyListActivity.this.confirmUse = menu.add(R.string.pubkey_confirm_use);\n            PubkeyListActivity.this.confirmUse.setCheckable(true);\n            PubkeyListActivity.this.confirmUse.setChecked(this.pubkey.isConfirmUse());\n            PubkeyListActivity.this.confirmUse.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    PubkeyViewHolder.this.pubkey.setConfirmUse(!PubkeyViewHolder.this.pubkey.isConfirmUse());\n                    PubkeyDatabase.get(PubkeyListActivity.this).savePubkey(PubkeyViewHolder.this.pubkey);\n                    PubkeyListActivity.this.updateList();\n                    return true;\n                }\n            });\n            menu.add(R.string.pubkey_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(PubkeyListActivity.this, R.style.AlertDialogTheme).setMessage(PubkeyListActivity.this.getString(R.string.delete_message, new Object[]{PubkeyViewHolder.this.pubkey.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (loaded) {\n                                PubkeyListActivity.this.bound.removeKey(PubkeyViewHolder.this.pubkey.getNickname());\n                            }\n                            PubkeyDatabase.get(PubkeyListActivity.this).deletePubkey(PubkeyViewHolder.this.pubkey);\n                            PubkeyListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        updateList();\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_pubkeylist);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        registerForContextMenu(this.mListView);\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.pubkey_list_activity_menu, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.add_new_key_icon:\n                startActivity(new Intent(this, GeneratePubkeyActivity.class));\n                return true;\n            case R.id.import_existing_key_icon:\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    private boolean importExistingKey() {\n        Uri sdcard = Uri.fromFile(Environment.getExternalStorageDirectory());\n        String pickerTitle = getString(R.string.pubkey_list_pick);\n        if ((VERSION.SDK_INT &gt;= 19 && importExistingKeyKitKat()) || importExistingKeyOpenIntents(sdcard, pickerTitle) || importExistingKeyAndExplorer(sdcard, pickerTitle) || pickFileSimple()) {\n            return true;\n        }\n        return false;\n    }\n    @TargetApi(19)\n    public boolean importExistingKeyKitKat() {\n        Intent intent = new Intent(\"android.intent.action.OPEN_DOCUMENT\");\n        intent.addCategory(\"android.intent.category.OPENABLE\");\n        intent.setType(\"*/*\");\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean importExistingKeyOpenIntents(Uri sdcard, String pickerTitle) {\n        Intent intent = new Intent(\"org.openintents.action.PICK_FILE\");\n        intent.setData(sdcard);\n        intent.putExtra(\"org.openintents.extra.TITLE\", pickerTitle);\n        intent.putExtra(\"org.openintents.extra.BUTTON_TEXT\", getString(17039370));\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean importExistingKeyAndExplorer(Uri sdcard, String pickerTitle) {\n        Intent intent = new Intent(\"android.intent.action.PICK\");\n        intent.setDataAndType(sdcard, \"vnd.android.cursor.dir/lysesoft.andexplorer.file\");\n        intent.putExtra(\"explorer_title\", pickerTitle);\n        try {\n            startActivityForResult(intent, 1);\n            return true;\n        } catch (ActivityNotFoundException e) {\n            return false;\n        }\n    }\n    private boolean pickFileSimple() {\n        final File sdcard = Environment.getExternalStorageDirectory();\n        Log.d(\"CB.PubkeyListActivity\", sdcard.toString());\n        String state = Environment.getExternalStorageState();\n        if (\"mounted_ro\".equals(state) || \"mounted\".equals(state)) {\n            List&lt;String> names = new LinkedList();\n            if (sdcard.listFiles() != null) {\n                for (File file : sdcard.listFiles()) {\n                    if (!file.isDirectory()) {\n                        names.add(file.getName());\n                    }\n                }\n            }\n            Collections.sort(names);\n            final String[] namesList = (String[]) names.toArray(new String[0]);\n            Log.d(\"CB.PubkeyListActivity\", names.toString());\n            new Builder(this, R.style.AlertDialogTheme).setTitle((int) R.string.pubkey_list_pick).setItems(namesList, new OnClickListener() {\n                public void onClick(DialogInterface arg0, int arg1) {\n                    PubkeyListActivity.this.readKeyFromFile(Uri.fromFile(new File(sdcard, namesList[arg1])));\n                }\n            }).setNegativeButton(17039360, null).create().show();\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage((int) R.string.alert_sdcard_absent).setNegativeButton(17039360, null).create().show();\n        }\n        return true;\n    }\n    protected void handleAddKey(final PubkeyBean pubkey) {\n        if (pubkey.isEncrypted()) {\n            View view = View.inflate(this, R.layout.dia_password, null);\n            final EditText passwordField = (EditText) view.findViewById(16908308);\n            new Builder(this, R.style.AlertDialogTheme).setView(view).setPositiveButton(R.string.pubkey_unlock, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    PubkeyListActivity.this.handleAddKey(pubkey, passwordField.getText().toString());\n                }\n            }).setNegativeButton(17039360, null).create().show();\n            return;\n        }\n        handleAddKey(pubkey, null);\n    }\n    protected void handleAddKey(PubkeyBean keybean, String password) {\n        String message;\n        KeyPair pair = null;\n        if (\"IMPORTED\".equals(keybean.getType())) {\n            try {\n                pair = PEMDecoder.decode(new String(keybean.getPrivateKey()).toCharArray(), password);\n            } catch (Exception e) {\n                message = getResources().getString(R.string.pubkey_failed_add, new Object[]{keybean.getNickname()});\n                Log.e(\"CB.PubkeyListActivity\", message, e);\n                Toast.makeText(this, message, 1).show();\n            }\n        } else {\n            try {\n                PrivateKey privKey = PubkeyUtils.decodePrivate(keybean.getPrivateKey(), keybean.getType(), password);\n                PublicKey pubKey = PubkeyUtils.decodePublic(keybean.getPublicKey(), keybean.getType());\n                Log.d(\"CB.PubkeyListActivity\", \"Unlocked key \" + PubkeyUtils.formatKey(pubKey));\n                pair = new KeyPair(pubKey, privKey);\n            } catch (Exception e2) {\n                message = getResources().getString(R.string.pubkey_failed_add, new Object[]{keybean.getNickname()});\n                Log.e(\"CB.PubkeyListActivity\", message, e2);\n                Toast.makeText(this, message, 1).show();\n                return;\n            }\n        }\n        if (pair != null) {\n            Log.d(\"CB.PubkeyListActivity\", String.format(\"Unlocked key '%s'\", new Object[]{keybean.getNickname()}));\n            this.bound.addKey(keybean, pair, true);\n            updateList();\n        }\n    }\n    protected void updateList() {\n        this.pubkeys = PubkeyDatabase.get(this).allPubkeys();\n        this.mAdapter = new PubkeyAdapter(this, this.pubkeys);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent resultData) {\n        super.onActivityResult(requestCode, resultCode, resultData);\n        switch (requestCode) {\n            case 1:\n                if (resultCode == -1 && resultData != null) {\n                    Uri uri = resultData.getData();\n                    if (uri != null) {\n                        try {\n                            readKeyFromFile(uri);\n                            return;\n                        } catch (IllegalArgumentException e) {\n                            Log.e(\"CB.PubkeyListActivity\", \"Couldn't read from picked file\", e);\n                            return;\n                        }\n                    }\n                    String filename = resultData.getDataString();\n                    if (filename != null) {\n                        readKeyFromFile(Uri.parse(filename));\n                        return;\n                    }\n                    return;\n                }\n                return;\n            default:\n                return;\n        }\n    }\n    public static byte[] getBytesFromInputStream(InputStream is, int maxSize) throws IOException {\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        byte[] buffer = new byte[65535];\n        while (true) {\n            int len = is.read(buffer);\n            if (len != -1 && os.size() &lt; maxSize) {\n                os.write(buffer, 0, len);\n            }\n        }\n        if (os.size() &gt;= maxSize) {\n            throw new IOException(\"File was too big\");\n        }\n        os.flush();\n        return os.toByteArray();\n    }\n    private KeyPair readPKCS8Key(byte[] keyData) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(keyData)));\n        try {\n            ByteArrayOutputStream keyBytes = new ByteArrayOutputStream();\n            boolean inKey = false;\n            while (true) {\n                String line = reader.readLine();\n                if (line == null) {\n                    break;\n                } else if (line.equals(\"-----BEGIN PRIVATE KEY-----\")) {\n                    inKey = true;\n                } else if (line.equals(\"-----END PRIVATE KEY-----\")) {\n                    break;\n                } else if (inKey) {\n                    keyBytes.write(line.getBytes(\"US-ASCII\"));\n                }\n            }\n            if (keyBytes.size() &gt; 0) {\n                return PubkeyUtils.recoverKeyPair(Base64.decode(keyBytes.toString().toCharArray()));\n            }\n            return null;\n        } catch (Exception e) {\n            return null;\n        }\n    }\n    private void readKeyFromFile(Uri uri) {\n        PubkeyBean pubkey = new PubkeyBean();\n        pubkey.setNickname(uri.getLastPathSegment());\n        try {\n            byte[] keyData = getBytesFromInputStream(getContentResolver().openInputStream(uri), 32768);\n            KeyPair kp = readPKCS8Key(keyData);\n            if (kp != null) {\n                pubkey.setType(convertAlgorithmName(kp.getPrivate().getAlgorithm()));\n                pubkey.setPrivateKey(kp.getPrivate().getEncoded());\n                pubkey.setPublicKey(kp.getPublic().getEncoded());\n            } else {\n                try {\n                    PEMStructure struct = PEMDecoder.parsePEM(new String(keyData).toCharArray());\n                    boolean encrypted = PEMDecoder.isPEMEncrypted(struct);\n                    pubkey.setEncrypted(encrypted);\n                    if (encrypted) {\n                        pubkey.setType(\"IMPORTED\");\n                        pubkey.setPrivateKey(keyData);\n                    } else {\n                        kp = PEMDecoder.decode(struct, null);\n                        pubkey.setType(convertAlgorithmName(kp.getPrivate().getAlgorithm()));\n                        pubkey.setPrivateKey(kp.getPrivate().getEncoded());\n                        pubkey.setPublicKey(kp.getPublic().getEncoded());\n                    }\n                } catch (IOException e) {\n                    Log.e(\"CB.PubkeyListActivity\", \"Problem parsing imported private key\", e);\n                    Toast.makeText(this, R.string.pubkey_import_parse_problem, 1).show();\n                }\n            }\n            PubkeyDatabase.get(this).savePubkey(pubkey);\n            updateList();\n        } catch (IOException e2) {\n            Toast.makeText(this, R.string.pubkey_import_parse_problem, 1).show();\n        }\n    }\n    private String convertAlgorithmName(String algorithm) {\n        if (\"EdDSA\".equals(algorithm)) {\n            return \"ED25519\";\n        }\n        return algorithm;\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.PubkeyListActivity.png", "type": "suit", "target_fullname": "org.connectbot.GeneratePubkeyActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:background=\"#ff000000\"&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@android:id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/terminal_no_hosts_connected\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"/&gt;\n\t&lt;org.connectbot.util.TerminalViewPager\n\t\tandroid:id=\"@+id/console_flip\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\t/&gt;\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_password_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_password_instructions\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_marginBottom=\"5dip\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\tandroid:visibility=\"gone\"\n\t\t\t/&gt;\n\t\t&lt;EditText\n\t\t\tandroid:id=\"@+id/console_password\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_password_instructions\"\n\t\t\tandroid:inputType=\"textPassword\"\n\t\t\tandroid:singleLine=\"true\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;RelativeLayout\n\t\tandroid:id=\"@+id/console_boolean_group\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:background=\"#80000000\"\n\t\tandroid:fadingEdge=\"horizontal\"\n\t\tandroid:fadingEdgeLength=\"25dip\"\n\t\tandroid:padding=\"5dip\"\n\t\tandroid:visibility=\"gone\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:id=\"@+id/console_prompt\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_no\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_alignParentEnd=\"true\"\n\t\t\tandroid:layout_alignParentRight=\"true\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:clickable=\"false\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_no\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/console_prompt_yes\"\n\t\t\tandroid:layout_width=\"wrap_content\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:layout_below=\"@+id/console_prompt\"\n\t\t\tandroid:layout_toLeftOf=\"@+id/console_prompt_no\"\n\t\t\tandroid:paddingBottom=\"10dip\"\n\t\t\tandroid:paddingLeft=\"40dip\"\n\t\t\tandroid:paddingRight=\"40dip\"\n\t\t\tandroid:paddingTop=\"5dip\"\n\t\t\tandroid:text=\"@string/button_yes\"\n\t\t\t/&gt;\n\t&lt;/RelativeLayout>\n\t&lt;include layout=\"@layout/inc_keyboard\" />\n&lt;/RelativeLayout>\n", "source_fullname": "org.connectbot.HostListActivity", "methodSourceLink": [{"source": "onResume", "target": "disconnectAll"}, {"source": "access$100", "target": "disconnectAll"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onMenuItemClick", "target": "access$100"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onClick", "target": "access$002"}, {"source": "onClick", "target": "access$200"}, {"source": "onClick", "target": "access$002"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "onActivityResult", "target": "updateList"}], "target": "ConsoleActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.ConsoleActivity.png", "methodTargetLink": [{"source": "onResume", "target": "configureOrientation"}, {"source": "updatePromptVisible", "target": "getCurrentTerminalView"}, {"source": "updatePromptVisible", "target": "hideAllPrompts"}, {"source": "access$1400", "target": "pasteIntoTerminal"}, {"source": "getCurrentTerminalView", "target": "getBridgeAtPosition"}, {"source": "onCreate", "target": "run"}, {"source": "onCreate", "target": "requestActionBar"}, {"source": "onCreate", "target": "showEmulatedKeys"}, {"source": "onCreate", "target": "addKeyRepeater"}, {"source": "onCreate", "target": "setupTabLayoutWithViewPager"}, {"source": "setupTabLayoutWithViewPager", "target": "getCount"}, {"source": "hideEmulatedKeys", "target": "hideActionBarIfRequested"}, {"source": "access$900", "target": "hideEmulatedKeys"}, {"source": "access$600", "target": "hideActionBarIfRequested"}, {"source": "access$100", "target": "onEmulatedKeyClicked"}, {"source": "onKey", "target": "getCurrentPromptHelper"}, {"source": "onKey", "target": "updatePromptVisible"}, {"source": "onEmulatedKeyClicked", "target": "getCurrentTerminalView"}, {"source": "onEmulatedKeyClicked", "target": "hideEmulatedKeys"}, {"source": "onEmulatedKeyClicked", "target": "hideActionBarIfRequested"}, {"source": "onEmulatedKeyClicked", "target": "autoHideEmulatedKeys"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "ACTIVITY", "target": "onCreate"}, {"source": "ACTIVITY", "target": "onSaveInstanceState"}, {"source": "onGlobalLayout", "target": "access$1300"}, {"source": "onGlobalLayout", "target": "access$1200"}, {"source": "notifyDataSetChanged", "target": "getCount"}, {"source": "showEmulatedKeys", "target": "autoHideEmulatedKeys"}, {"source": "run", "target": "run"}, {"source": "run", "target": "access$702"}, {"source": "run", "target": "access$400"}, {"source": "run", "target": "access$500"}, {"source": "run", "target": "access$600"}, {"source": "run", "target": "access$300"}, {"source": "run", "target": "access$200"}, {"source": "run", "target": "run"}, {"source": "access$1000", "target": "autoHideEmulatedKeys"}, {"source": "updateDefault", "target": "getCurrentTerminalView"}, {"source": "findCurrentView", "target": "getBridgeAtPosition"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "access$1400"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "onMenuItemClick", "target": "getCurrentTerminalView"}, {"source": "access$1100", "target": "showEmulatedKeys"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$900"}, {"source": "onClick", "target": "getCurrentTerminalView"}, {"source": "onClick", "target": "getCurrentPromptHelper"}, {"source": "onClick", "target": "updatePromptVisible"}, {"source": "onClick", "target": "access$100"}, {"source": "onClick", "target": "access$1100"}, {"source": "onClick", "target": "access$100"}, {"source": "onCreateOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "onPrepareOptionsMenu", "target": "getCurrentTerminalView"}, {"source": "getPageTitle", "target": "getBridgeAtPosition"}, {"source": "getCurrentPromptHelper", "target": "getCurrentTerminalView"}, {"source": "onTerminalChanged", "target": "updateDefault"}, {"source": "onTerminalChanged", "target": "updatePromptVisible"}, {"source": "onTerminalChanged", "target": "findCurrentView"}, {"source": "onNewIntent", "target": "notifyDataSetChanged"}, {"source": "onNewIntent", "target": "setDisplayedTerminal"}, {"source": "onNewIntent", "target": "getCount"}, {"source": "onTouch", "target": "access$1000"}, {"source": "onTouch", "target": "run"}, {"source": "setDisplayedTerminal", "target": "getPageTitle"}, {"source": "setDisplayedTerminal", "target": "onTerminalChanged"}, {"source": "pasteIntoTerminal", "target": "getCurrentTerminalView"}, {"source": "onSaveInstanceState", "target": "getCurrentTerminalView"}, {"source": "autoHideEmulatedKeys", "target": "run"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/list_host_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_host_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tandroid:tint=\"@android:color/white\"\n\t\tandroid:contentDescription=\"@string/hostpref_add_host\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "target_actcode": "public class ConsoleActivity extends AppCompatActivity implements BridgeDisconnectedListener {\n    private ActionBar actionBar;\n    protected TerminalPagerAdapter adapter = null;\n    private Button booleanNo;\n    private TextView booleanPrompt;\n    private RelativeLayout booleanPromptGroup;\n    private Button booleanYes;\n    protected TerminalManager bound = null;\n    protected ClipboardManager clipboard;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            ConsoleActivity.this.bound = ((TerminalBinder) service).getService();\n            ConsoleActivity.this.bound.disconnectListener = ConsoleActivity.this;\n            ConsoleActivity.this.bound.setResizeAllowed(true);\n            String requestedNickname = ConsoleActivity.this.requested != null ? ConsoleActivity.this.requested.getFragment() : null;\n            TerminalBridge requestedBridge = ConsoleActivity.this.bound.getConnectedBridge(requestedNickname);\n            if (requestedNickname != null && requestedBridge == null) {\n                try {\n                    Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s), so creating one now\", new Object[]{ConsoleActivity.this.requested.toString(), requestedNickname}));\n                    requestedBridge = ConsoleActivity.this.bound.openConnection(ConsoleActivity.this.requested);\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                }\n            }\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            final int requestedIndex = ConsoleActivity.this.bound.getBridges().indexOf(requestedBridge);\n            if (requestedBridge != null) {\n                requestedBridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            }\n            if (requestedIndex != -1) {\n                ConsoleActivity.this.pager.post(new Runnable() {\n                    public void run() {\n                        ConsoleActivity.this.setDisplayedTerminal(requestedIndex);\n                    }\n                });\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            ConsoleActivity.this.bound = null;\n            ConsoleActivity.this.adapter.notifyDataSetChanged();\n            ConsoleActivity.this.updateEmptyVisible();\n        }\n    };\n    private View contentView;\n    private MenuItem copy;\n    private MenuItem disconnect;\n    private TextView empty;\n    protected OnClickListener emulatedKeysListener = new OnClickListener() {\n        public void onClick(View v) {\n            ConsoleActivity.this.onEmulatedKeyClicked(v);\n        }\n    };\n    private Animation fade_out_delayed;\n    private boolean forcedOrientation;\n    private Handler handler = new Handler();\n    private boolean hardKeyboard = false;\n    private boolean inActionBarMenu = false;\n    protected LayoutInflater inflater = null;\n    private InputMethodManager inputManager;\n    protected Handler keyRepeatHandler = new Handler();\n    private boolean keyboardAlwaysVisible = false;\n    private LinearLayout keyboardGroup;\n    private Runnable keyboardGroupHider;\n    private Animation keyboard_fade_in;\n    private Animation keyboard_fade_out;\n    private ImageView mKeyboardButton;\n    protected TerminalViewPager pager = null;\n    private MenuItem paste;\n    private MenuItem portForward;\n    private SharedPreferences prefs = null;\n    protected Handler promptHandler = new Handler() {\n        public void handleMessage(Message msg) {\n            ConsoleActivity.this.updatePromptVisible();\n        }\n    };\n    protected Uri requested;\n    private MenuItem resize;\n    protected EditText stringPrompt;\n    private RelativeLayout stringPromptGroup;\n    private TextView stringPromptInstructions;\n    protected TabLayout tabs = null;\n    private boolean titleBarHide;\n    protected Toolbar toolbar = null;\n    private MenuItem urlscan;\n    public class KeyRepeater implements OnClickListener, OnTouchListener, Runnable {\n        private boolean mDown = false;\n        private Handler mHandler;\n        private View mView;\n        public KeyRepeater(Handler handler, View view) {\n            this.mView = view;\n            this.mHandler = handler;\n        }\n        public void run() {\n            this.mDown = true;\n            this.mHandler.removeCallbacks(this);\n            this.mHandler.postDelayed(this, 100);\n            this.mView.performClick();\n        }\n        public boolean onTouch(View v, MotionEvent event) {\n            switch (event.getAction()) {\n                case 0:\n                    this.mDown = false;\n                    this.mHandler.postDelayed(this, 500);\n                    this.mView.setPressed(true);\n                    return true;\n                case 1:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    if (this.mDown) {\n                        return true;\n                    }\n                    this.mView.performClick();\n                    return true;\n                case 3:\n                    this.mHandler.removeCallbacks(this);\n                    this.mView.setPressed(false);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n        public void onClick(View view) {\n            ConsoleActivity.this.onEmulatedKeyClicked(view);\n        }\n    }\n    public class TerminalPagerAdapter extends PagerAdapter {\n        public int getCount() {\n            if (ConsoleActivity.this.bound != null) {\n                return ConsoleActivity.this.bound.getBridges().size();\n            }\n            return 0;\n        }\n        public Object instantiateItem(ViewGroup container, int position) {\n            if (ConsoleActivity.this.bound == null || ConsoleActivity.this.bound.getBridges().size() &lt;= position) {\n                Log.w(\"CB.ConsoleActivity\", \"Activity not bound when creating TerminalView.\");\n            }\n            TerminalBridge bridge = (TerminalBridge) ConsoleActivity.this.bound.getBridges().get(position);\n            bridge.promptHelper.setHandler(ConsoleActivity.this.promptHandler);\n            RelativeLayout view = (RelativeLayout) ConsoleActivity.this.inflater.inflate(R.layout.item_terminal, container, false);\n            TextView terminalNameOverlay = (TextView) view.findViewById(R.id.terminal_name_overlay);\n            terminalNameOverlay.setText(bridge.host.getNickname());\n            TerminalView terminal = new TerminalView(container.getContext(), bridge, ConsoleActivity.this.pager);\n            terminal.setId(R.id.terminal_view);\n            view.addView(terminal, 0);\n            view.setTag(bridge);\n            container.addView(view);\n            terminalNameOverlay.startAnimation(ConsoleActivity.this.fade_out_delayed);\n            return view;\n        }\n        public void destroyItem(ViewGroup container, int position, Object object) {\n            container.removeView((View) object);\n        }\n        public int getItemPosition(Object object) {\n            if (ConsoleActivity.this.bound == null) {\n                return -2;\n            }\n            HostBean host = ((TerminalView) ((View) object).findViewById(R.id.terminal_view)).bridge.host;\n            int i = 0;\n            Iterator it = ConsoleActivity.this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                if (((TerminalBridge) it.next()).host.equals(host)) {\n                    return i;\n                }\n                i++;\n            }\n            return -2;\n        }\n        public TerminalBridge getBridgeAtPosition(int position) {\n            if (ConsoleActivity.this.bound == null) {\n                return null;\n            }\n            ArrayList&lt;TerminalBridge> bridges = ConsoleActivity.this.bound.getBridges();\n            if (position &lt; 0 || position >= bridges.size()) {\n                return null;\n            }\n            return (TerminalBridge) bridges.get(position);\n        }\n        public void notifyDataSetChanged() {\n            super.notifyDataSetChanged();\n            if (ConsoleActivity.this.tabs != null) {\n                ConsoleActivity.this.toolbar.setVisibility(getCount() &gt; 1 ? 0 : 8);\n                ConsoleActivity.this.tabs.setTabsFromPagerAdapter(this);\n            }\n        }\n        public boolean isViewFromObject(View view, Object object) {\n            return view == object;\n        }\n        public CharSequence getPageTitle(int position) {\n            TerminalBridge bridge = getBridgeAtPosition(position);\n            if (bridge == null) {\n                return \"???\";\n            }\n            return bridge.host.getNickname();\n        }\n        public TerminalView getCurrentTerminalView() {\n            View currentView = ConsoleActivity.this.pager.findViewWithTag(getBridgeAtPosition(ConsoleActivity.this.pager.getCurrentItem()));\n            if (currentView == null) {\n                return null;\n            }\n            return (TerminalView) currentView.findViewById(R.id.terminal_view);\n        }\n    }\n    private class URLItemListener implements OnItemClickListener {\n        private WeakReference&lt;Context> contextRef;\n        URLItemListener(Context context) {\n            this.contextRef = new WeakReference(context);\n        }\n        public void onItemClick(AdapterView&lt;?> adapterView, View view, int position, long id) {\n            Context context = (Context) this.contextRef.get();\n            if (context != null) {\n                try {\n                    String url = ((TextView) view).getText().toString();\n                    if (url.indexOf(\"://\") &lt; 0) {\n                        url = \"http://\" + url;\n                    }\n                    context.startActivity(new Intent(\"android.intent.action.VIEW\", Uri.parse(url)));\n                } catch (Exception e) {\n                    Log.e(\"CB.ConsoleActivity\", \"couldn't open URL\", e);\n                }\n            }\n        }\n    }\n    public void onDisconnected(TerminalBridge bridge) {\n        synchronized (this.adapter) {\n            this.adapter.notifyDataSetChanged();\n            Log.d(\"CB.ConsoleActivity\", \"Someone sending HANDLE_DISCONNECT to parentHandler\");\n            if (bridge.isAwaitingClose()) {\n                closeBridge(bridge);\n            }\n        }\n    }\n    private void onEmulatedKeyClicked(View v) {\n        TerminalView terminal = this.adapter.getCurrentTerminalView();\n        if (terminal != null) {\n            TerminalKeyListener handler = terminal.bridge.getKeyHandler();\n            boolean hideKeys = false;\n            switch (v.getId()) {\n                case R.id.button_ctrl:\n                    handler.metaPress(1, true);\n                    hideKeys = true;\n                    break;\n                case R.id.button_esc:\n                    handler.sendEscape();\n                    hideKeys = true;\n                    break;\n                case R.id.button_tab:\n                    handler.sendTab();\n                    hideKeys = true;\n                    break;\n                case R.id.button_up:\n                    handler.sendPressedKey(14);\n                    break;\n                case R.id.button_down:\n                    handler.sendPressedKey(15);\n                    break;\n                case R.id.button_left:\n                    handler.sendPressedKey(16);\n                    break;\n                case R.id.button_right:\n                    handler.sendPressedKey(17);\n                    break;\n                case R.id.button_home:\n                    handler.sendPressedKey(23);\n                    break;\n                case R.id.button_end:\n                    handler.sendPressedKey(24);\n                    break;\n                case R.id.button_pgup:\n                    handler.sendPressedKey(19);\n                    break;\n                case R.id.button_pgdn:\n                    handler.sendPressedKey(18);\n                    break;\n                case R.id.button_f1:\n                    handler.sendPressedKey(2);\n                    break;\n                case R.id.button_f2:\n                    handler.sendPressedKey(3);\n                    break;\n                case R.id.button_f3:\n                    handler.sendPressedKey(4);\n                    break;\n                case R.id.button_f4:\n                    handler.sendPressedKey(5);\n                    break;\n                case R.id.button_f5:\n                    handler.sendPressedKey(6);\n                    break;\n                case R.id.button_f6:\n                    handler.sendPressedKey(7);\n                    break;\n                case R.id.button_f7:\n                    handler.sendPressedKey(8);\n                    break;\n                case R.id.button_f8:\n                    handler.sendPressedKey(9);\n                    break;\n                case R.id.button_f9:\n                    handler.sendPressedKey(10);\n                    break;\n                case R.id.button_f10:\n                    handler.sendPressedKey(11);\n                    break;\n                case R.id.button_f11:\n                    handler.sendPressedKey(12);\n                    break;\n                case R.id.button_f12:\n                    handler.sendPressedKey(13);\n                    break;\n                default:\n                    Log.e(\"CB.ConsoleActivity\", \"Unknown emulated key clicked: \" + v.getId());\n                    break;\n            }\n            if (hideKeys) {\n                hideEmulatedKeys();\n            } else {\n                autoHideEmulatedKeys();\n            }\n            terminal.bridge.tryKeyVibrate();\n            hideActionBarIfRequested();\n        }\n    }\n    private void hideActionBarIfRequested() {\n        if (this.titleBarHide && this.actionBar != null) {\n            this.actionBar.hide();\n        }\n    }\n    private void closeBridge(TerminalBridge bridge) {\n        updateEmptyVisible();\n        updatePromptVisible();\n        if (this.pager.getChildCount() == 0) {\n            finish();\n        }\n    }\n    protected View findCurrentView(int id) {\n        View view = this.pager.findViewWithTag(this.adapter.getBridgeAtPosition(this.pager.getCurrentItem()));\n        if (view == null) {\n            return null;\n        }\n        return view.findViewById(id);\n    }\n    protected PromptHelper getCurrentPromptHelper() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view == null) {\n            return null;\n        }\n        return view.bridge.promptHelper;\n    }\n    protected void hideAllPrompts() {\n        this.stringPromptGroup.setVisibility(8);\n        this.booleanPromptGroup.setVisibility(8);\n    }\n    private void showEmulatedKeys(boolean showActionBar) {\n        if (this.keyboardGroup.getVisibility() == 8) {\n            this.keyboardGroup.startAnimation(this.keyboard_fade_in);\n            this.keyboardGroup.setVisibility(0);\n        }\n        if (showActionBar) {\n            this.actionBar.show();\n        }\n        autoHideEmulatedKeys();\n    }\n    private void autoHideEmulatedKeys() {\n        if (this.keyboardGroupHider != null) {\n            this.handler.removeCallbacks(this.keyboardGroupHider);\n        }\n        this.keyboardGroupHider = new Runnable() {\n            public void run() {\n                if (ConsoleActivity.this.keyboardGroup.getVisibility() != 8 && !ConsoleActivity.this.inActionBarMenu) {\n                    if (!ConsoleActivity.this.keyboardAlwaysVisible) {\n                        ConsoleActivity.this.keyboardGroup.startAnimation(ConsoleActivity.this.keyboard_fade_out);\n                        ConsoleActivity.this.keyboardGroup.setVisibility(8);\n                    }\n                    ConsoleActivity.this.hideActionBarIfRequested();\n                    ConsoleActivity.this.keyboardGroupHider = null;\n                }\n            }\n        };\n        this.handler.postDelayed(this.keyboardGroupHider, 3000);\n    }\n    private void hideEmulatedKeys() {\n        if (!this.keyboardAlwaysVisible) {\n            if (this.keyboardGroupHider != null) {\n                this.handler.removeCallbacks(this.keyboardGroupHider);\n            }\n            this.keyboardGroup.setVisibility(8);\n        }\n        hideActionBarIfRequested();\n    }\n    @TargetApi(11)\n    private void requestActionBar() {\n        supportRequestWindowFeature(9);\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        super.onCreate(icicle);\n        if (VERSION.SDK_INT &gt;= 9) {\n            StrictModeSetup.run();\n        }\n        if (getResources().getConfiguration().keyboard == 2) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.hardKeyboard = z;\n        this.clipboard = (ClipboardManager) getSystemService(\"clipboard\");\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        this.titleBarHide = this.prefs.getBoolean(\"titlebarhide\", false);\n        if (this.titleBarHide && VERSION.SDK_INT &gt;= 11) {\n            requestActionBar();\n        }\n        setContentView((int) R.layout.act_console);\n        if (this.prefs.getBoolean(\"fullscreen\", false)) {\n            getWindow().setFlags(1024, 1024);\n        }\n        setVolumeControlStream(3);\n        if (icicle == null) {\n            this.requested = getIntent().getData();\n        } else {\n            String uri = icicle.getString(\"selectedUri\");\n            if (uri != null) {\n                this.requested = Uri.parse(uri);\n            }\n        }\n        this.inflater = LayoutInflater.from(this);\n        this.toolbar = (Toolbar) findViewById(R.id.toolbar);\n        this.pager = (TerminalViewPager) findViewById(R.id.console_flip);\n        this.pager.addOnPageChangeListener(new SimpleOnPageChangeListener() {\n            public void onPageSelected(int position) {\n                ConsoleActivity.this.setTitle(ConsoleActivity.this.adapter.getPageTitle(position));\n                ConsoleActivity.this.onTerminalChanged();\n            }\n        });\n        this.adapter = new TerminalPagerAdapter();\n        this.pager.setAdapter(this.adapter);\n        this.empty = (TextView) findViewById(16908292);\n        this.stringPromptGroup = (RelativeLayout) findViewById(R.id.console_password_group);\n        this.stringPromptInstructions = (TextView) findViewById(R.id.console_password_instructions);\n        this.stringPrompt = (EditText) findViewById(R.id.console_password);\n        this.stringPrompt.setOnKeyListener(new OnKeyListener() {\n            public boolean onKey(View v, int keyCode, KeyEvent event) {\n                if (event.getAction() == 1 || keyCode != 66) {\n                    return false;\n                }\n                String value = ConsoleActivity.this.stringPrompt.getText().toString();\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper == null) {\n                    return false;\n                }\n                helper.setResponse(value);\n                ConsoleActivity.this.stringPrompt.setText(\"\");\n                ConsoleActivity.this.updatePromptVisible();\n                return true;\n            }\n        });\n        this.booleanPromptGroup = (RelativeLayout) findViewById(R.id.console_boolean_group);\n        this.booleanPrompt = (TextView) findViewById(R.id.console_prompt);\n        this.booleanYes = (Button) findViewById(R.id.console_prompt_yes);\n        this.booleanYes.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.TRUE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.booleanNo = (Button) findViewById(R.id.console_prompt_no);\n        this.booleanNo.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                PromptHelper helper = ConsoleActivity.this.getCurrentPromptHelper();\n                if (helper != null) {\n                    helper.setResponse(Boolean.FALSE);\n                    ConsoleActivity.this.updatePromptVisible();\n                }\n            }\n        });\n        this.fade_out_delayed = AnimationUtils.loadAnimation(this, R.anim.fade_out_delayed);\n        this.keyboard_fade_in = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_in);\n        this.keyboard_fade_out = AnimationUtils.loadAnimation(this, R.anim.keyboard_fade_out);\n        this.inputManager = (InputMethodManager) getSystemService(\"input_method\");\n        this.keyboardGroup = (LinearLayout) findViewById(R.id.keyboard_group);\n        this.keyboardAlwaysVisible = this.prefs.getBoolean(\"alwaysvisible\", false);\n        if (this.keyboardAlwaysVisible) {\n            LayoutParams layoutParams = new LayoutParams(-1, -1);\n            layoutParams.addRule(2, R.id.keyboard_group);\n            this.pager.setLayoutParams(layoutParams);\n            this.keyboardGroup.setVisibility(0);\n        }\n        this.mKeyboardButton = (ImageView) findViewById(R.id.button_keyboard);\n        this.mKeyboardButton.setOnClickListener(new OnClickListener() {\n            public void onClick(View view) {\n                View terminal = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                if (terminal != null) {\n                    ((InputMethodManager) ConsoleActivity.this.getSystemService(\"input_method\")).toggleSoftInputFromWindow(terminal.getApplicationWindowToken(), 2, 0);\n                    terminal.requestFocus();\n                    ConsoleActivity.this.hideEmulatedKeys();\n                }\n            }\n        });\n        findViewById(R.id.button_ctrl).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_esc).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_tab).setOnClickListener(this.emulatedKeysListener);\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_up));\n        addKeyRepeater(findViewById(R.id.button_down));\n        addKeyRepeater(findViewById(R.id.button_left));\n        addKeyRepeater(findViewById(R.id.button_right));\n        findViewById(R.id.button_home).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_end).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgup).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_pgdn).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f1).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f2).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f3).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f4).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f5).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f6).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f7).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f8).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f9).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f10).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f11).setOnClickListener(this.emulatedKeysListener);\n        findViewById(R.id.button_f12).setOnClickListener(this.emulatedKeysListener);\n        this.actionBar = getSupportActionBar();\n        if (this.actionBar != null) {\n            this.actionBar.setDisplayHomeAsUpEnabled(true);\n            if (this.titleBarHide) {\n                this.actionBar.hide();\n            }\n            this.actionBar.addOnMenuVisibilityListener(new OnMenuVisibilityListener() {\n                public void onMenuVisibilityChanged(boolean isVisible) {\n                    ConsoleActivity.this.inActionBarMenu = isVisible;\n                    if (!isVisible) {\n                        ConsoleActivity.this.hideEmulatedKeys();\n                    }\n                }\n            });\n        }\n        final HorizontalScrollView keyboardScroll = (HorizontalScrollView) findViewById(R.id.keyboard_hscroll);\n        if (!this.hardKeyboard) {\n            showEmulatedKeys(false);\n            keyboardScroll.postDelayed(new Runnable() {\n                public void run() {\n                    final int xscroll = ConsoleActivity.this.findViewById(R.id.button_f12).getRight();\n                    keyboardScroll.smoothScrollBy(xscroll, 0);\n                    keyboardScroll.postDelayed(new Runnable() {\n                        public void run() {\n                            keyboardScroll.smoothScrollBy(-xscroll, 0);\n                        }\n                    }, 500);\n                }\n            }, 500);\n        }\n        keyboardScroll.setOnTouchListener(new OnTouchListener() {\n            public boolean onTouch(View v, MotionEvent event) {\n                switch (event.getAction()) {\n                    case 1:\n                        v.performClick();\n                        return true;\n                    case 2:\n                        ConsoleActivity.this.autoHideEmulatedKeys();\n                        break;\n                }\n                return false;\n            }\n        });\n        this.tabs = (TabLayout) findViewById(R.id.tabs);\n        if (this.tabs != null) {\n            setupTabLayoutWithViewPager();\n        }\n        this.pager.setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                ConsoleActivity.this.showEmulatedKeys(true);\n            }\n        });\n        this.contentView = findViewById(16908290);\n        this.contentView.getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {\n            public void onGlobalLayout() {\n                Rect r = new Rect();\n                ConsoleActivity.this.contentView.getWindowVisibleDisplayFrame(r);\n                int screenHeight = ConsoleActivity.this.contentView.getRootView().getHeight();\n                if (((double) (screenHeight - r.bottom)) &gt; ((double) screenHeight) * 0.15d) {\n                    ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard_hide);\n                    ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_hide_keyboard));\n                    return;\n                }\n                ConsoleActivity.this.mKeyboardButton.setImageResource(R.drawable.ic_keyboard);\n                ConsoleActivity.this.mKeyboardButton.setContentDescription(ConsoleActivity.this.getResources().getText(R.string.image_description_show_keyboard));\n            }\n        });\n    }\n    private void addKeyRepeater(View view) {\n        KeyRepeater keyRepeater = new KeyRepeater(this.keyRepeatHandler, view);\n        view.setOnClickListener(keyRepeater);\n        view.setOnTouchListener(keyRepeater);\n    }\n    public void setupTabLayoutWithViewPager() {\n        this.tabs.setTabsFromPagerAdapter(this.adapter);\n        this.pager.addOnPageChangeListener(new TabLayoutOnPageChangeListener(this.tabs));\n        this.tabs.setOnTabSelectedListener(new ViewPagerOnTabSelectedListener(this.pager));\n        if (this.adapter.getCount() &gt; 0) {\n            int curItem = this.pager.getCurrentItem();\n            if (this.tabs.getSelectedTabPosition() != curItem) {\n                this.tabs.getTabAt(curItem).select();\n            }\n        }\n    }\n    private void configureOrientation() {\n        String rotateDefault;\n        if (getResources().getConfiguration().keyboard == 1) {\n            rotateDefault = \"Force portrait\";\n        } else {\n            rotateDefault = \"Force landscape\";\n        }\n        String rotate = this.prefs.getString(\"rotation\", rotateDefault);\n        if (\"Default\".equals(rotate)) {\n            rotate = rotateDefault;\n        }\n        if (\"Force landscape\".equals(rotate)) {\n            setRequestedOrientation(0);\n            this.forcedOrientation = true;\n        } else if (\"Force portrait\".equals(rotate)) {\n            setRequestedOrientation(1);\n            this.forcedOrientation = true;\n        } else {\n            setRequestedOrientation(-1);\n            this.forcedOrientation = false;\n        }\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onCreateOptionsMenu(menu);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        menu.setQwertyMode(true);\n        this.disconnect = menu.add(R.string.list_host_disconnect);\n        if (this.hardKeyboard) {\n            this.disconnect.setAlphabeticShortcut('w');\n        }\n        if (!sessionOpen && disconnected) {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        this.disconnect.setIcon(17301560);\n        this.disconnect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.dispatchDisconnect(true);\n                return true;\n            }\n        });\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy = menu.add(R.string.console_menu_copy);\n            if (this.hardKeyboard) {\n                this.copy.setAlphabeticShortcut('c');\n            }\n            MenuItemCompat.setShowAsAction(this.copy, 1);\n            this.copy.setIcon(R.drawable.ic_action_copy);\n            this.copy.setEnabled(activeTerminal);\n            this.copy.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    ConsoleActivity.this.adapter.getCurrentTerminalView().startPreHoneycombCopyMode();\n                    Toast.makeText(ConsoleActivity.this, ConsoleActivity.this.getString(R.string.console_copy_start), 1).show();\n                    return true;\n                }\n            });\n        }\n        this.paste = menu.add(R.string.console_menu_paste);\n        if (this.hardKeyboard) {\n            this.paste.setAlphabeticShortcut('v');\n        }\n        MenuItemCompat.setShowAsAction(this.paste, 1);\n        this.paste.setIcon(R.drawable.ic_action_paste);\n        this.paste.setEnabled(activeTerminal);\n        this.paste.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                ConsoleActivity.this.pasteIntoTerminal();\n                return true;\n            }\n        });\n        this.portForward = menu.add(R.string.console_menu_portforwards);\n        if (this.hardKeyboard) {\n            this.portForward.setAlphabeticShortcut('f');\n        }\n        this.portForward.setIcon(17301570);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.portForward.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                TerminalBridge bridge = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge;\n                Intent intent = new Intent(ConsoleActivity.this, PortForwardListActivity.class);\n                intent.putExtra(\"android.intent.extra.TITLE\", bridge.host.getId());\n                ConsoleActivity.this.startActivityForResult(intent, 1);\n                return true;\n            }\n        });\n        this.urlscan = menu.add(R.string.console_menu_urlscan);\n        if (this.hardKeyboard) {\n            this.urlscan.setAlphabeticShortcut('u');\n        }\n        this.urlscan.setIcon(17301583);\n        this.urlscan.setEnabled(activeTerminal);\n        this.urlscan.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                List&lt;String> urls = ConsoleActivity.this.adapter.getCurrentTerminalView().bridge.scanForURLs();\n                Dialog urlDialog = new Dialog(ConsoleActivity.this);\n                urlDialog.setTitle(R.string.console_menu_urlscan);\n                ListView urlListView = new ListView(ConsoleActivity.this);\n                urlListView.setOnItemClickListener(new URLItemListener(ConsoleActivity.this));\n                urlListView.setAdapter(new ArrayAdapter(ConsoleActivity.this, 17367043, urls));\n                urlDialog.setContentView(urlListView);\n                urlDialog.show();\n                return true;\n            }\n        });\n        this.resize = menu.add(R.string.console_menu_resize);\n        if (this.hardKeyboard) {\n            this.resize.setAlphabeticShortcut('s');\n        }\n        this.resize.setIcon(17301562);\n        this.resize.setEnabled(sessionOpen);\n        this.resize.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n            public boolean onMenuItemClick(MenuItem item) {\n                final TerminalView terminalView = ConsoleActivity.this.adapter.getCurrentTerminalView();\n                final View resizeView = ConsoleActivity.this.inflater.inflate(R.layout.dia_resize, null, false);\n                new Builder(ConsoleActivity.this, R.style.AlertDialogTheme).setView(resizeView).setPositiveButton(R.string.button_resize, new DialogInterface.OnClickListener() {\n                    public void onClick(DialogInterface dialog, int which) {\n                        try {\n                            terminalView.forceSize(Integer.parseInt(((EditText) resizeView.findViewById(R.id.width)).getText().toString()), Integer.parseInt(((EditText) resizeView.findViewById(R.id.height)).getText().toString()));\n                        } catch (NumberFormatException e) {\n                        }\n                    }\n                }).setNegativeButton(17039360, null).create().show();\n                return true;\n            }\n        });\n        return true;\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean activeTerminal;\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        setVolumeControlStream(5);\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null) {\n            activeTerminal = true;\n        } else {\n            activeTerminal = false;\n        }\n        boolean sessionOpen = false;\n        boolean disconnected = false;\n        boolean canForwardPorts = false;\n        if (activeTerminal) {\n            TerminalBridge bridge = view.bridge;\n            sessionOpen = bridge.isSessionOpen();\n            disconnected = bridge.isDisconnected();\n            canForwardPorts = bridge.canFowardPorts();\n        }\n        this.disconnect.setEnabled(activeTerminal);\n        if (sessionOpen || !disconnected) {\n            this.disconnect.setTitle(R.string.list_host_disconnect);\n        } else {\n            this.disconnect.setTitle(R.string.console_menu_close);\n        }\n        if (VERSION.SDK_INT &lt; 11) {\n            this.copy.setEnabled(activeTerminal);\n        }\n        this.paste.setEnabled(activeTerminal);\n        MenuItem menuItem = this.portForward;\n        if (sessionOpen && canForwardPorts) {\n            z = true;\n        }\n        menuItem.setEnabled(z);\n        this.urlscan.setEnabled(activeTerminal);\n        this.resize.setEnabled(sessionOpen);\n        return true;\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n                Intent intent = new Intent(this, HostListActivity.class);\n                intent.addFlags(67108864);\n                startActivity(intent);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onOptionsMenuClosed(Menu menu) {\n        super.onOptionsMenuClosed(menu);\n        setVolumeControlStream(3);\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n    }\n    public void onPause() {\n        super.onPause();\n        Log.d(\"CB.ConsoleActivity\", \"onPause called\");\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(false);\n        }\n    }\n    public void onResume() {\n        super.onResume();\n        Log.d(\"CB.ConsoleActivity\", \"onResume called\");\n        if (this.prefs.getBoolean(\"keepalive\", true)) {\n            getWindow().addFlags(128);\n        } else {\n            getWindow().clearFlags(128);\n        }\n        configureOrientation();\n        if (this.forcedOrientation && this.bound != null) {\n            this.bound.setResizeAllowed(true);\n        }\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        Log.d(\"CB.ConsoleActivity\", \"onNewIntent called\");\n        this.requested = intent.getData();\n        if (this.requested == null) {\n            Log.e(\"CB.ConsoleActivity\", \"Got null intent data in onNewIntent()\");\n        } else if (this.bound == null) {\n            Log.e(\"CB.ConsoleActivity\", \"We're not bound in onNewIntent()\");\n        } else {\n            TerminalBridge requestedBridge = this.bound.getConnectedBridge(this.requested.getFragment());\n            int requestedIndex = 0;\n            synchronized (this.pager) {\n                if (requestedBridge == null) {\n                    try {\n                        Log.d(\"CB.ConsoleActivity\", String.format(\"We couldnt find an existing bridge with URI=%s (nickname=%s),so creating one now\", new Object[]{this.requested.toString(), this.requested.getFragment()}));\n                        this.bound.openConnection(this.requested);\n                        this.adapter.notifyDataSetChanged();\n                        requestedIndex = this.adapter.getCount();\n                    } catch (Exception e) {\n                        Log.e(\"CB.ConsoleActivity\", \"Problem while trying to create new requested bridge from URI\", e);\n                        return;\n                    }\n                }\n                int flipIndex = this.bound.getBridges().indexOf(requestedBridge);\n                if (flipIndex &gt; 0) {\n                    requestedIndex = flipIndex;\n                }\n                setDisplayedTerminal(requestedIndex);\n            }\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n    }\n    public void onSaveInstanceState(Bundle savedInstanceState) {\n        TerminalView currentTerminalView = this.adapter.getCurrentTerminalView();\n        if (!(currentTerminalView == null || currentTerminalView.bridge.isDisconnected())) {\n            this.requested = currentTerminalView.bridge.host.getUri();\n            savedInstanceState.putString(\"selectedUri\", this.requested.toString());\n        }\n        super.onSaveInstanceState(savedInstanceState);\n    }\n    private void updateDefault() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        if (view != null && this.bound != null) {\n            this.bound.defaultBridge = view.bridge;\n        }\n    }\n    protected void updateEmptyVisible() {\n        this.empty.setVisibility(this.pager.getChildCount() == 0 ? 0 : 8);\n    }\n    protected void updatePromptVisible() {\n        TerminalView view = this.adapter.getCurrentTerminalView();\n        hideAllPrompts();\n        if (view != null) {\n            PromptHelper prompt = view.bridge.promptHelper;\n            if (String.class.equals(prompt.promptRequested)) {\n                this.stringPromptGroup.setVisibility(0);\n                String instructions = prompt.promptInstructions;\n                if (instructions == null || instructions.length() &lt;= 0) {\n                    this.stringPromptInstructions.setVisibility(8);\n                } else {\n                    this.stringPromptInstructions.setVisibility(0);\n                    this.stringPromptInstructions.setText(instructions);\n                }\n                this.stringPrompt.setText(\"\");\n                this.stringPrompt.setHint(prompt.promptHint);\n                this.stringPrompt.requestFocus();\n            } else if (Boolean.class.equals(prompt.promptRequested)) {\n                this.booleanPromptGroup.setVisibility(0);\n                this.booleanPrompt.setText(prompt.promptHint);\n                this.booleanYes.requestFocus();\n            } else {\n                hideAllPrompts();\n                view.requestFocus();\n            }\n        }\n    }\n    public void onConfigurationChanged(Configuration newConfig) {\n        int i = 0;\n        boolean z = true;\n        super.onConfigurationChanged(newConfig);\n        Log.d(\"CB.ConsoleActivity\", String.format(\"onConfigurationChanged; requestedOrientation=%d, newConfig.orientation=%d\", new Object[]{Integer.valueOf(getRequestedOrientation()), Integer.valueOf(newConfig.orientation)}));\n        if (this.bound != null) {\n            if (!(this.forcedOrientation && newConfig.orientation != 2 && getRequestedOrientation() == 0) && (newConfig.orientation == 1 || getRequestedOrientation() != 1)) {\n                this.bound.setResizeAllowed(true);\n            } else {\n                this.bound.setResizeAllowed(false);\n            }\n            TerminalManager terminalManager = this.bound;\n            if (newConfig.hardKeyboardHidden != 2) {\n                z = false;\n            }\n            terminalManager.hardKeyboardHidden = z;\n            ImageView imageView = this.mKeyboardButton;\n            if (!this.bound.hardKeyboardHidden) {\n                i = 8;\n            }\n            imageView.setVisibility(i);\n        }\n    }\n    private void onTerminalChanged() {\n        View terminalNameOverlay = findCurrentView(R.id.terminal_name_overlay);\n        if (terminalNameOverlay != null) {\n            terminalNameOverlay.startAnimation(this.fade_out_delayed);\n        }\n        updateDefault();\n        updatePromptVisible();\n        ActivityCompat.invalidateOptionsMenu(this);\n    }\n    private void setDisplayedTerminal(int requestedIndex) {\n        this.pager.setCurrentItem(requestedIndex);\n        setTitle(this.adapter.getPageTitle(requestedIndex));\n        onTerminalChanged();\n    }\n    private void pasteIntoTerminal() {\n        TerminalBridge bridge = this.adapter.getCurrentTerminalView().bridge;\n        String clip = \"\";\n        if (this.clipboard.hasText()) {\n            clip = this.clipboard.getText().toString();\n        }\n        bridge.injectString(clip);\n    }\n}\n", "source": "HostListActivity", "source_actcode": "public class HostListActivity extends AppCompatListActivity implements OnHostStatusChangedListener {\n    protected TerminalManager bound = null;\n    private boolean closeOnDisconnectAll = true;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            HostListActivity.this.bound = ((TerminalBinder) service).getService();\n            HostListActivity.this.updateList();\n            HostListActivity.this.bound.registerOnHostStatusChangedListener(HostListActivity.this);\n            if (HostListActivity.this.waitingForDisconnectAll) {\n                HostListActivity.this.disconnectAll();\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            HostListActivity.this.bound.unregisterOnHostStatusChangedListener(HostListActivity.this);\n            HostListActivity.this.bound = null;\n            HostListActivity.this.updateList();\n        }\n    };\n    private MenuItem disconnectall;\n    private HostStorage hostdb;\n    private List&lt;HostBean> hosts;\n    protected LayoutInflater inflater = null;\n    protected boolean makingShortcut = false;\n    private SharedPreferences prefs = null;\n    private MenuItem sortcolor;\n    protected boolean sortedByColor = false;\n    private MenuItem sortlast;\n    private boolean waitingForDisconnectAll = false;\n    private class HostAdapter extends ItemAdapter {\n        private final List&lt;HostBean> hosts;\n        private final TerminalManager manager;\n        public HostAdapter(Context context, List&lt;HostBean> hosts, TerminalManager manager) {\n            super(context);\n            this.hosts = hosts;\n            this.manager = manager;\n        }\n        private int getConnectedState(HostBean host) {\n            if (this.manager == null || host == null) {\n                return 1;\n            }\n            if (this.manager.getConnectedBridge(host) != null) {\n                return 2;\n            }\n            if (this.manager.disconnected.contains(host)) {\n                return 3;\n            }\n            return 1;\n        }\n        public HostViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new HostViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_host, parent, false));\n        }\n        @TargetApi(16)\n        private void hideFromAccessibility(View view, boolean hide) {\n            view.setImportantForAccessibility(hide ? 2 : 1);\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            int chosenStyleFirstLine;\n            int chosenStyleSecondLine;\n            HostViewHolder hostHolder = (HostViewHolder) holder;\n            HostBean host = (HostBean) this.hosts.get(position);\n            hostHolder.host = host;\n            if (host == null) {\n                Log.e(\"HostAdapter\", \"Host bean is null!\");\n                hostHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                hostHolder.nickname.setText(host.getNickname());\n            }\n            switch (getConnectedState(host)) {\n                case 1:\n                    hostHolder.icon.setImageState(new int[0], true);\n                    hostHolder.icon.setContentDescription(null);\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, true);\n                        break;\n                    }\n                    break;\n                case 2:\n                    hostHolder.icon.setImageState(new int[]{16842912}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_connected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                case 3:\n                    hostHolder.icon.setImageState(new int[]{16842920}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_disconnected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                default:\n                    Log.e(\"HostAdapter\", \"Unknown host state encountered: \" + getConnectedState(host));\n                    break;\n            }\n            if (\"red\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Red;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Red;\n            } else if (\"green\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Green;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Green;\n            } else if (\"blue\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Blue;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Blue;\n            } else {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText;\n            }\n            hostHolder.nickname.setTextAppearance(this.context, chosenStyleFirstLine);\n            hostHolder.caption.setTextAppearance(this.context, chosenStyleSecondLine);\n            CharSequence nice = this.context.getString(R.string.bind_never);\n            if (host.getLastConnect() &gt; 0) {\n                nice = DateUtils.getRelativeTimeSpanString(host.getLastConnect() * 1000);\n            }\n            hostHolder.caption.setText(nice);\n        }\n        public long getItemId(int position) {\n            return ((HostBean) this.hosts.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.hosts.size();\n        }\n    }\n    public class HostViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public HostBean host;\n        public final ImageView icon;\n        public final TextView nickname;\n        public HostViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            Intent contents = new Intent(\"android.intent.action.VIEW\", this.host.getUri());\n            contents.setFlags(67108864);\n            if (HostListActivity.this.makingShortcut) {\n                ShortcutIconResource icon = ShortcutIconResource.fromContext(HostListActivity.this, R.drawable.icon);\n                Intent intent = new Intent();\n                intent.putExtra(\"android.intent.extra.shortcut.INTENT\", contents);\n                intent.putExtra(\"android.intent.extra.shortcut.NAME\", this.host.getNickname());\n                intent.putExtra(\"android.intent.extra.shortcut.ICON_RESOURCE\", icon);\n                HostListActivity.this.setResult(-1, intent);\n                HostListActivity.this.finish();\n                return;\n            }\n            contents.setClass(HostListActivity.this, ConsoleActivity.class);\n            HostListActivity.this.startActivity(contents);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean z;\n            menu.setHeaderTitle(this.host.getNickname());\n            MenuItem connect = menu.add(R.string.list_host_disconnect);\n            final TerminalBridge bridge = HostListActivity.this.bound == null ? null : HostListActivity.this.bound.getConnectedBridge(this.host);\n            if (bridge != null) {\n                z = true;\n            } else {\n                z = false;\n            }\n            connect.setEnabled(z);\n            connect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    bridge.dispatchDisconnect(true);\n                    return true;\n                }\n            });\n            menu.add(R.string.list_host_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForExistingHost(HostListActivity.this, HostViewHolder.this.host.getId()), 1);\n                    return true;\n                }\n            });\n            MenuItem portForwards = menu.add(R.string.list_host_portforwards);\n            portForwards.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    Intent intent = new Intent(HostListActivity.this, PortForwardListActivity.class);\n                    intent.putExtra(\"android.intent.extra.TITLE\", HostViewHolder.this.host.getId());\n                    HostListActivity.this.startActivityForResult(intent, 1);\n                    return true;\n                }\n            });\n            if (!TransportFactory.canForwardPorts(this.host.getProtocol())) {\n                portForwards.setEnabled(false);\n            }\n            menu.add(R.string.list_host_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(HostListActivity.this, R.style.AlertDialogTheme).setMessage(HostListActivity.this.getString(R.string.delete_message, new Object[]{HostViewHolder.this.host.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (bridge != null) {\n                                bridge.dispatchDisconnect(true);\n                            }\n                            HostListActivity.this.hostdb.deleteHost(HostViewHolder.this.host);\n                            HostListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n        this.closeOnDisconnectAll = true;\n    }\n    public void onResume() {\n        super.onResume();\n        if ((getIntent().getFlags() & 1048576) == 0 && \"org.connectbot.action.DISCONNECT\".equals(getIntent().getAction())) {\n            Log.d(\"CB.HostListActivity\", \"Got disconnect all request\");\n            disconnectAll();\n        }\n        boolean z = this.waitingForDisconnectAll && this.closeOnDisconnectAll;\n        this.closeOnDisconnectAll = z;\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == 1) {\n            updateList();\n        }\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        int i = 0;\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_hostlist);\n        setTitle(R.string.title_hosts_list);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (Build.MANUFACTURER.equals(\"HTC\") && Build.DEVICE.equals(\"dream\")) {\n            Editor editor = this.prefs.edit();\n            boolean doCommit = false;\n            if (!(this.prefs.contains(\"shiftfkeys\") || this.prefs.contains(\"ctrlfkeys\"))) {\n                editor.putBoolean(\"shiftfkeys\", true);\n                editor.putBoolean(\"ctrlfkeys\", true);\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"stickymodifiers\")) {\n                editor.putString(\"stickymodifiers\", \"yes\");\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"keymode\")) {\n                editor.putString(\"keymode\", \"Use right-side keys\");\n                doCommit = true;\n            }\n            if (doCommit) {\n                editor.commit();\n            }\n        }\n        if (\"android.intent.action.CREATE_SHORTCUT\".equals(getIntent().getAction()) || \"android.intent.action.PICK\".equals(getIntent().getAction())) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.makingShortcut = z;\n        this.hostdb = HostDatabase.get(this);\n        this.sortedByColor = this.prefs.getBoolean(\"sortByColor\", false);\n        registerForContextMenu(this.mListView);\n        FloatingActionButton addHostButton = (FloatingActionButton) findViewById(R.id.add_host_button);\n        if (this.makingShortcut) {\n            i = 8;\n        }\n        addHostButton.setVisibility(i);\n        addHostButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForNewHost(HostListActivity.this), 1);\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            boolean z2;\n            MenuItem menuItem = this.sortcolor;\n            if (this.sortedByColor) {\n                z2 = false;\n            } else {\n                z2 = true;\n            }\n            menuItem.setVisible(z2);\n            this.sortlast.setVisible(this.sortedByColor);\n            MenuItem menuItem2 = this.disconnectall;\n            if (this.bound != null && this.bound.getBridges().size() &gt; 0) {\n                z = true;\n            }\n            menuItem2.setEnabled(z);\n        }\n        return true;\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            this.sortcolor = menu.add(R.string.list_menu_sortcolor);\n            this.sortcolor.setIcon(17301586);\n            this.sortcolor.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = true;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            this.sortlast = menu.add(R.string.list_menu_sortname);\n            this.sortlast.setIcon(17301586);\n            this.sortlast.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = false;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem keys = menu.add(R.string.list_menu_pubkeys);\n            keys.setIcon(17301551);\n            keys.setIntent(new Intent(this, PubkeyListActivity.class));\n            MenuItem colors = menu.add(R.string.title_colors);\n            colors.setIcon(17301587);\n            colors.setIntent(new Intent(this, ColorsActivity.class));\n            this.disconnectall = menu.add(R.string.list_menu_disconnect);\n            this.disconnectall.setIcon(17301564);\n            this.disconnectall.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem menuItem) {\n                    HostListActivity.this.disconnectAll();\n                    return false;\n                }\n            });\n            MenuItem settings = menu.add(R.string.list_menu_settings);\n            settings.setIcon(17301577);\n            settings.setIntent(new Intent(this, SettingsActivity.class));\n            MenuItem help = menu.add(R.string.title_help);\n            help.setIcon(17301568);\n            help.setIntent(new Intent(this, HelpActivity.class));\n        }\n        return true;\n    }\n    private void disconnectAll() {\n        if (this.bound == null) {\n            this.waitingForDisconnectAll = true;\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage(getString(R.string.disconnect_all_message)).setPositiveButton(R.string.disconnect_all_pos, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.bound.disconnectAll(true, false);\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                    if (HostListActivity.this.closeOnDisconnectAll) {\n                        HostListActivity.this.finish();\n                    }\n                }\n            }).setNegativeButton(R.string.disconnect_all_neg, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                }\n            }).create().show();\n        }\n    }\n    protected void updateList() {\n        if (this.prefs.getBoolean(\"sortByColor\", false) != this.sortedByColor) {\n            Editor edit = this.prefs.edit();\n            edit.putBoolean(\"sortByColor\", this.sortedByColor);\n            edit.commit();\n        }\n        if (this.hostdb == null) {\n            this.hostdb = HostDatabase.get(this);\n        }\n        this.hosts = this.hostdb.getHosts(this.sortedByColor);\n        if (this.bound != null) {\n            Iterator it = this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                TerminalBridge bridge = (TerminalBridge) it.next();\n                if (!this.hosts.contains(bridge.host)) {\n                    this.hosts.add(0, bridge.host);\n                }\n            }\n        }\n        this.mAdapter = new HostAdapter(this, this.hosts, this.bound);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    public void onHostStatusChanged() {\n        updateList();\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.HostListActivity.png", "type": "suit", "target_fullname": "org.connectbot.ConsoleActivity"},
{"target_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;ScrollView\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"wrap_content\"\n\tandroid:layout_weight=\"1\"\n\t&gt;\n\t&lt;LinearLayout\n\t\tandroid:id=\"@+id/topics\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:gravity=\"center_horizontal\"\n\t\tandroid:orientation=\"vertical\"\n\t\t&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"end\"\n\t\t\tandroid:paddingRight=\"2dip\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/msg_version\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceSmall\"\n\t\t\t/&gt;\n\t\t&lt;TextView\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:gravity=\"center_horizontal\"\n\t\t\tandroid:paddingTop=\"2dip\"\n\t\t\tandroid:text=\"@string/help_intro\"\n\t\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t\t/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/hints_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/hints\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/shortcuts_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/keyboard_shortcuts\"/&gt;\n\t\t&lt;Button\n\t\t\tandroid:id=\"@+id/eula_button\"\n\t\t\tandroid:layout_width=\"fill_parent\"\n\t\t\tandroid:layout_height=\"wrap_content\"\n\t\t\tandroid:text=\"@string/terms_and_conditions\"/&gt;\n\t&lt;/LinearLayout>\n&lt;/ScrollView>\n", "source_fullname": "org.connectbot.HostListActivity", "methodSourceLink": [{"source": "onResume", "target": "disconnectAll"}, {"source": "access$100", "target": "disconnectAll"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onMenuItemClick", "target": "access$100"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onClick", "target": "access$002"}, {"source": "onClick", "target": "access$200"}, {"source": "onClick", "target": "access$002"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "onActivityResult", "target": "updateList"}], "target": "HelpActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.HelpActivity.png", "methodTargetLink": [{"source": "onClick", "target": "access$000"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/list_host_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_host_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tandroid:tint=\"@android:color/white\"\n\t\tandroid:contentDescription=\"@string/hostpref_add_host\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "target_actcode": "public class HelpActivity extends AppCompatActivity {\n    private LayoutInflater inflater = null;\n    public void onCreate(Bundle icicle) {\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_help);\n        ((Button) findViewById(R.id.hints_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, HintsActivity.class));\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n        ((Button) findViewById(R.id.shortcuts_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                new Builder(HelpActivity.this, R.style.AlertDialogTheme).setView(HelpActivity.this.inflater.inflate(R.layout.dia_keyboard_shortcuts, null, false)).setTitle((int) R.string.keyboard_shortcuts).show();\n            }\n        });\n        ((Button) findViewById(R.id.eula_button)).setOnClickListener(new OnClickListener() {\n            public void onClick(View v) {\n                HelpActivity.this.startActivity(new Intent(HelpActivity.this, EulaActivity.class));\n            }\n        });\n    }\n}\n", "source": "HostListActivity", "source_actcode": "public class HostListActivity extends AppCompatListActivity implements OnHostStatusChangedListener {\n    protected TerminalManager bound = null;\n    private boolean closeOnDisconnectAll = true;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            HostListActivity.this.bound = ((TerminalBinder) service).getService();\n            HostListActivity.this.updateList();\n            HostListActivity.this.bound.registerOnHostStatusChangedListener(HostListActivity.this);\n            if (HostListActivity.this.waitingForDisconnectAll) {\n                HostListActivity.this.disconnectAll();\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            HostListActivity.this.bound.unregisterOnHostStatusChangedListener(HostListActivity.this);\n            HostListActivity.this.bound = null;\n            HostListActivity.this.updateList();\n        }\n    };\n    private MenuItem disconnectall;\n    private HostStorage hostdb;\n    private List&lt;HostBean> hosts;\n    protected LayoutInflater inflater = null;\n    protected boolean makingShortcut = false;\n    private SharedPreferences prefs = null;\n    private MenuItem sortcolor;\n    protected boolean sortedByColor = false;\n    private MenuItem sortlast;\n    private boolean waitingForDisconnectAll = false;\n    private class HostAdapter extends ItemAdapter {\n        private final List&lt;HostBean> hosts;\n        private final TerminalManager manager;\n        public HostAdapter(Context context, List&lt;HostBean> hosts, TerminalManager manager) {\n            super(context);\n            this.hosts = hosts;\n            this.manager = manager;\n        }\n        private int getConnectedState(HostBean host) {\n            if (this.manager == null || host == null) {\n                return 1;\n            }\n            if (this.manager.getConnectedBridge(host) != null) {\n                return 2;\n            }\n            if (this.manager.disconnected.contains(host)) {\n                return 3;\n            }\n            return 1;\n        }\n        public HostViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new HostViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_host, parent, false));\n        }\n        @TargetApi(16)\n        private void hideFromAccessibility(View view, boolean hide) {\n            view.setImportantForAccessibility(hide ? 2 : 1);\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            int chosenStyleFirstLine;\n            int chosenStyleSecondLine;\n            HostViewHolder hostHolder = (HostViewHolder) holder;\n            HostBean host = (HostBean) this.hosts.get(position);\n            hostHolder.host = host;\n            if (host == null) {\n                Log.e(\"HostAdapter\", \"Host bean is null!\");\n                hostHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                hostHolder.nickname.setText(host.getNickname());\n            }\n            switch (getConnectedState(host)) {\n                case 1:\n                    hostHolder.icon.setImageState(new int[0], true);\n                    hostHolder.icon.setContentDescription(null);\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, true);\n                        break;\n                    }\n                    break;\n                case 2:\n                    hostHolder.icon.setImageState(new int[]{16842912}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_connected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                case 3:\n                    hostHolder.icon.setImageState(new int[]{16842920}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_disconnected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                default:\n                    Log.e(\"HostAdapter\", \"Unknown host state encountered: \" + getConnectedState(host));\n                    break;\n            }\n            if (\"red\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Red;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Red;\n            } else if (\"green\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Green;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Green;\n            } else if (\"blue\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Blue;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Blue;\n            } else {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText;\n            }\n            hostHolder.nickname.setTextAppearance(this.context, chosenStyleFirstLine);\n            hostHolder.caption.setTextAppearance(this.context, chosenStyleSecondLine);\n            CharSequence nice = this.context.getString(R.string.bind_never);\n            if (host.getLastConnect() &gt; 0) {\n                nice = DateUtils.getRelativeTimeSpanString(host.getLastConnect() * 1000);\n            }\n            hostHolder.caption.setText(nice);\n        }\n        public long getItemId(int position) {\n            return ((HostBean) this.hosts.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.hosts.size();\n        }\n    }\n    public class HostViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public HostBean host;\n        public final ImageView icon;\n        public final TextView nickname;\n        public HostViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            Intent contents = new Intent(\"android.intent.action.VIEW\", this.host.getUri());\n            contents.setFlags(67108864);\n            if (HostListActivity.this.makingShortcut) {\n                ShortcutIconResource icon = ShortcutIconResource.fromContext(HostListActivity.this, R.drawable.icon);\n                Intent intent = new Intent();\n                intent.putExtra(\"android.intent.extra.shortcut.INTENT\", contents);\n                intent.putExtra(\"android.intent.extra.shortcut.NAME\", this.host.getNickname());\n                intent.putExtra(\"android.intent.extra.shortcut.ICON_RESOURCE\", icon);\n                HostListActivity.this.setResult(-1, intent);\n                HostListActivity.this.finish();\n                return;\n            }\n            contents.setClass(HostListActivity.this, ConsoleActivity.class);\n            HostListActivity.this.startActivity(contents);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean z;\n            menu.setHeaderTitle(this.host.getNickname());\n            MenuItem connect = menu.add(R.string.list_host_disconnect);\n            final TerminalBridge bridge = HostListActivity.this.bound == null ? null : HostListActivity.this.bound.getConnectedBridge(this.host);\n            if (bridge != null) {\n                z = true;\n            } else {\n                z = false;\n            }\n            connect.setEnabled(z);\n            connect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    bridge.dispatchDisconnect(true);\n                    return true;\n                }\n            });\n            menu.add(R.string.list_host_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForExistingHost(HostListActivity.this, HostViewHolder.this.host.getId()), 1);\n                    return true;\n                }\n            });\n            MenuItem portForwards = menu.add(R.string.list_host_portforwards);\n            portForwards.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    Intent intent = new Intent(HostListActivity.this, PortForwardListActivity.class);\n                    intent.putExtra(\"android.intent.extra.TITLE\", HostViewHolder.this.host.getId());\n                    HostListActivity.this.startActivityForResult(intent, 1);\n                    return true;\n                }\n            });\n            if (!TransportFactory.canForwardPorts(this.host.getProtocol())) {\n                portForwards.setEnabled(false);\n            }\n            menu.add(R.string.list_host_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(HostListActivity.this, R.style.AlertDialogTheme).setMessage(HostListActivity.this.getString(R.string.delete_message, new Object[]{HostViewHolder.this.host.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (bridge != null) {\n                                bridge.dispatchDisconnect(true);\n                            }\n                            HostListActivity.this.hostdb.deleteHost(HostViewHolder.this.host);\n                            HostListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n        this.closeOnDisconnectAll = true;\n    }\n    public void onResume() {\n        super.onResume();\n        if ((getIntent().getFlags() & 1048576) == 0 && \"org.connectbot.action.DISCONNECT\".equals(getIntent().getAction())) {\n            Log.d(\"CB.HostListActivity\", \"Got disconnect all request\");\n            disconnectAll();\n        }\n        boolean z = this.waitingForDisconnectAll && this.closeOnDisconnectAll;\n        this.closeOnDisconnectAll = z;\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == 1) {\n            updateList();\n        }\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        int i = 0;\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_hostlist);\n        setTitle(R.string.title_hosts_list);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (Build.MANUFACTURER.equals(\"HTC\") && Build.DEVICE.equals(\"dream\")) {\n            Editor editor = this.prefs.edit();\n            boolean doCommit = false;\n            if (!(this.prefs.contains(\"shiftfkeys\") || this.prefs.contains(\"ctrlfkeys\"))) {\n                editor.putBoolean(\"shiftfkeys\", true);\n                editor.putBoolean(\"ctrlfkeys\", true);\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"stickymodifiers\")) {\n                editor.putString(\"stickymodifiers\", \"yes\");\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"keymode\")) {\n                editor.putString(\"keymode\", \"Use right-side keys\");\n                doCommit = true;\n            }\n            if (doCommit) {\n                editor.commit();\n            }\n        }\n        if (\"android.intent.action.CREATE_SHORTCUT\".equals(getIntent().getAction()) || \"android.intent.action.PICK\".equals(getIntent().getAction())) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.makingShortcut = z;\n        this.hostdb = HostDatabase.get(this);\n        this.sortedByColor = this.prefs.getBoolean(\"sortByColor\", false);\n        registerForContextMenu(this.mListView);\n        FloatingActionButton addHostButton = (FloatingActionButton) findViewById(R.id.add_host_button);\n        if (this.makingShortcut) {\n            i = 8;\n        }\n        addHostButton.setVisibility(i);\n        addHostButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForNewHost(HostListActivity.this), 1);\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            boolean z2;\n            MenuItem menuItem = this.sortcolor;\n            if (this.sortedByColor) {\n                z2 = false;\n            } else {\n                z2 = true;\n            }\n            menuItem.setVisible(z2);\n            this.sortlast.setVisible(this.sortedByColor);\n            MenuItem menuItem2 = this.disconnectall;\n            if (this.bound != null && this.bound.getBridges().size() &gt; 0) {\n                z = true;\n            }\n            menuItem2.setEnabled(z);\n        }\n        return true;\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            this.sortcolor = menu.add(R.string.list_menu_sortcolor);\n            this.sortcolor.setIcon(17301586);\n            this.sortcolor.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = true;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            this.sortlast = menu.add(R.string.list_menu_sortname);\n            this.sortlast.setIcon(17301586);\n            this.sortlast.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = false;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem keys = menu.add(R.string.list_menu_pubkeys);\n            keys.setIcon(17301551);\n            keys.setIntent(new Intent(this, PubkeyListActivity.class));\n            MenuItem colors = menu.add(R.string.title_colors);\n            colors.setIcon(17301587);\n            colors.setIntent(new Intent(this, ColorsActivity.class));\n            this.disconnectall = menu.add(R.string.list_menu_disconnect);\n            this.disconnectall.setIcon(17301564);\n            this.disconnectall.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem menuItem) {\n                    HostListActivity.this.disconnectAll();\n                    return false;\n                }\n            });\n            MenuItem settings = menu.add(R.string.list_menu_settings);\n            settings.setIcon(17301577);\n            settings.setIntent(new Intent(this, SettingsActivity.class));\n            MenuItem help = menu.add(R.string.title_help);\n            help.setIcon(17301568);\n            help.setIntent(new Intent(this, HelpActivity.class));\n        }\n        return true;\n    }\n    private void disconnectAll() {\n        if (this.bound == null) {\n            this.waitingForDisconnectAll = true;\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage(getString(R.string.disconnect_all_message)).setPositiveButton(R.string.disconnect_all_pos, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.bound.disconnectAll(true, false);\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                    if (HostListActivity.this.closeOnDisconnectAll) {\n                        HostListActivity.this.finish();\n                    }\n                }\n            }).setNegativeButton(R.string.disconnect_all_neg, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                }\n            }).create().show();\n        }\n    }\n    protected void updateList() {\n        if (this.prefs.getBoolean(\"sortByColor\", false) != this.sortedByColor) {\n            Editor edit = this.prefs.edit();\n            edit.putBoolean(\"sortByColor\", this.sortedByColor);\n            edit.commit();\n        }\n        if (this.hostdb == null) {\n            this.hostdb = HostDatabase.get(this);\n        }\n        this.hosts = this.hostdb.getHosts(this.sortedByColor);\n        if (this.bound != null) {\n            Iterator it = this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                TerminalBridge bridge = (TerminalBridge) it.next();\n                if (!this.hosts.contains(bridge.host)) {\n                    this.hosts.add(0, bridge.host);\n                }\n            }\n        }\n        this.mAdapter = new HostAdapter(this, this.hosts, this.bound);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    public void onHostStatusChanged() {\n        updateList();\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.HostListActivity.png", "type": "suit", "target_fullname": "org.connectbot.HelpActivity"},
{"target_layoutcode": "&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:tools=\"http://schemas.android.com/tools\"\n\tandroid:id=\"@+id/fragment_container\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\ttools:context=\"org.connectbot.EditHostActivity\"\n\ttools:ignore=\"MergeRootFrame\" /&gt;\n", "source_fullname": "org.connectbot.HostListActivity", "methodSourceLink": [{"source": "onResume", "target": "disconnectAll"}, {"source": "access$100", "target": "disconnectAll"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onMenuItemClick", "target": "access$100"}, {"source": "onMenuItemClick", "target": "updateList"}, {"source": "onClick", "target": "access$002"}, {"source": "onClick", "target": "access$200"}, {"source": "onClick", "target": "access$002"}, {"source": "ACTIVITY", "target": "onActivityResult"}, {"source": "ACTIVITY", "target": "onResume"}, {"source": "onActivityResult", "target": "updateList"}], "target": "EditHostActivity", "targetimg": "./org.connectbot_19100/activity_img/org.connectbot.EditHostActivity.png", "methodTargetLink": [{"source": "onCreateOptionsMenu", "target": "setAddSaveButtonEnabled"}, {"source": "onOptionsItemSelected", "target": "attemptSaveAndExit"}, {"source": "onBackPressed", "target": "attemptSaveAndExit"}, {"source": "access$200", "target": "initialize"}, {"source": "createIntentForNewHost", "target": "createIntentForExistingHost"}, {"source": "onStart", "target": "isInitialized"}, {"source": "onStart", "target": "getCharsetData"}, {"source": "onStart", "target": "doInBackground"}, {"source": "doInBackground", "target": "access$200"}, {"source": "doInBackground", "target": "doInBackground"}, {"source": "getCharsetData", "target": "initialize"}, {"source": "ACTIVITY", "target": "onStart"}, {"source": "attemptSaveAndExit", "target": "showDiscardDialog"}], "source_layoutcode": "&lt;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&lt;RelativeLayout\n\txmlns:android=\"http://schemas.android.com/apk/res/android\"\n\txmlns:app=\"http://schemas.android.com/apk/res-auto\"\n\tandroid:layout_width=\"fill_parent\"\n\tandroid:layout_height=\"fill_parent\"\n\tandroid:orientation=\"vertical\"\n\t&gt;\n\t     margins (16dp): 56dp + (2 x 16dp) = 88dp. --&gt;\n\t&lt;android.support.v7.widget.RecyclerView\n\t\tandroid:id=\"@+id/list\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:paddingBottom=\"88dp\"\n\t\tandroid:clipToPadding=\"false\"\n\t\t/&gt;\n\t&lt;TextView\n\t\tandroid:id=\"@+id/empty\"\n\t\tandroid:layout_width=\"fill_parent\"\n\t\tandroid:layout_height=\"fill_parent\"\n\t\tandroid:gravity=\"center\"\n\t\tandroid:text=\"@string/list_host_empty\"\n\t\tandroid:textAppearance=\"?android:attr/textAppearanceMedium\"\n\t\t/&gt;\n\t&lt;android.support.design.widget.FloatingActionButton\n\t\tandroid:id=\"@+id/add_host_button\"\n\t\tandroid:layout_width=\"wrap_content\"\n\t\tandroid:layout_height=\"wrap_content\"\n\t\tandroid:layout_alignParentBottom=\"true\"\n\t\tandroid:layout_alignParentEnd=\"true\"\n\t\tandroid:layout_alignParentRight=\"true\"\n\t\tandroid:layout_margin=\"16dp\"\n\t\tandroid:src=\"@drawable/ic_add\"\n\t\tandroid:tint=\"@android:color/white\"\n\t\tandroid:contentDescription=\"@string/hostpref_add_host\"\n\t\tapp:backgroundTint=\"@color/accent\"\n\t\tapp:rippleColor=\"@color/dark_accent\" /&gt;\n&lt;/RelativeLayout>\n", "target_actcode": "public class EditHostActivity extends AppCompatActivity implements Listener {\n    private TerminalBridge mBridge;\n    private HostBean mHost;\n    private HostDatabase mHostDb;\n    private boolean mIsCreating;\n    private PubkeyDatabase mPubkeyDb;\n    private MenuItem mSaveHostButton;\n    private ServiceConnection mTerminalConnection;\n    private static class CharsetHolder {\n        private static Map&lt;String, String> mData;\n        private static boolean mInitialized = false;\n        private CharsetHolder() {\n        }\n        public static Map&lt;String, String> getCharsetData() {\n            if (mData == null) {\n                initialize();\n            }\n            return mData;\n        }\n        private static synchronized void initialize() {\n            synchronized (CharsetHolder.class) {\n                if (!mInitialized) {\n                    mData = new HashMap();\n                    for (Entry&lt;String, Charset> entry : Charset.availableCharsets().entrySet()) {\n                        Charset c = (Charset) entry.getValue();\n                        if (c.canEncode() && c.isRegistered()) {\n                            if (((String) entry.getKey()).startsWith(\"cp\")) {\n                                mData.put(\"CP437\", \"CP437\");\n                            }\n                            mData.put(c.displayName(), entry.getKey());\n                        }\n                    }\n                    mInitialized = true;\n                }\n            }\n        }\n        public static boolean isInitialized() {\n            return mInitialized;\n        }\n    }\n    public static Intent createIntentForExistingHost(Context context, long existingHostId) {\n        Intent i = new Intent(context, EditHostActivity.class);\n        i.putExtra(\"org.connectbot.existing_host_id\", existingHostId);\n        return i;\n    }\n    public static Intent createIntentForNewHost(Context context) {\n        return createIntentForExistingHost(context, -1);\n    }\n    protected void onCreate(Bundle savedInstanceState) {\n        HostBean hostBean;\n        int i;\n        super.onCreate(savedInstanceState);\n        this.mHostDb = HostDatabase.get(this);\n        this.mPubkeyDb = PubkeyDatabase.get(this);\n        this.mTerminalConnection = new ServiceConnection() {\n            public void onServiceConnected(ComponentName className, IBinder service) {\n                EditHostActivity.this.mBridge = ((TerminalBinder) service).getService().getConnectedBridge(EditHostActivity.this.mHost);\n            }\n            public void onServiceDisconnected(ComponentName name) {\n                EditHostActivity.this.mBridge = null;\n            }\n        };\n        long hostId = getIntent().getLongExtra(\"org.connectbot.existing_host_id\", -1);\n        this.mIsCreating = hostId == -1;\n        if (this.mIsCreating) {\n            hostBean = null;\n        } else {\n            hostBean = this.mHostDb.findHostById(hostId);\n        }\n        this.mHost = hostBean;\n        ArrayList&lt;String> pubkeyNames = new ArrayList();\n        ArrayList&lt;String> pubkeyValues = new ArrayList();\n        TypedArray defaultPubkeyNames = getResources().obtainTypedArray(R.array.list_pubkeyids);\n        for (i = 0; i &lt; defaultPubkeyNames.length(); i++) {\n            pubkeyNames.add(defaultPubkeyNames.getString(i));\n        }\n        TypedArray defaultPubkeyValues = getResources().obtainTypedArray(R.array.list_pubkeyids_value);\n        for (i = 0; i &lt; defaultPubkeyValues.length(); i++) {\n            pubkeyValues.add(defaultPubkeyValues.getString(i));\n        }\n        for (CharSequence cs : this.mPubkeyDb.allValues(\"nickname\")) {\n            pubkeyNames.add(cs.toString());\n        }\n        for (CharSequence cs2 : this.mPubkeyDb.allValues(\"_id\")) {\n            pubkeyValues.add(cs2.toString());\n        }\n        setContentView((int) R.layout.activity_edit_host);\n        if (((HostEditorFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_container)) == null) {\n            getSupportFragmentManager().beginTransaction().add(R.id.fragment_container, HostEditorFragment.newInstance(this.mHost, pubkeyNames, pubkeyValues)).commit();\n        }\n        defaultPubkeyNames.recycle();\n        defaultPubkeyValues.recycle();\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        boolean z;\n        getMenuInflater().inflate(this.mIsCreating ? R.menu.edit_host_activity_add_menu : R.menu.edit_host_activity_edit_menu, menu);\n        this.mSaveHostButton = menu.getItem(0);\n        if (this.mIsCreating) {\n            z = false;\n        } else {\n            z = true;\n        }\n        setAddSaveButtonEnabled(z);\n        return super.onCreateOptionsMenu(menu);\n    }\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case 16908332:\n            case R.id.save:\n                attemptSaveAndExit();\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.mTerminalConnection, 1);\n        final HostEditorFragment fragment = (HostEditorFragment) getSupportFragmentManager().findFragmentById(R.id.fragment_container);\n        if (CharsetHolder.isInitialized()) {\n            fragment.setCharsetData(CharsetHolder.getCharsetData());\n        } else {\n            new AsyncTask&lt;Void, Void, Void>() {\n                protected Void doInBackground(Void... unused) {\n                    CharsetHolder.initialize();\n                    return null;\n                }\n                protected void onPostExecute(Void unused) {\n                    fragment.setCharsetData(CharsetHolder.getCharsetData());\n                }\n            }.execute(new Void[0]);\n        }\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.mTerminalConnection);\n    }\n    public void onValidHostConfigured(HostBean host) {\n        this.mHost = host;\n        if (this.mSaveHostButton != null) {\n            setAddSaveButtonEnabled(true);\n        }\n    }\n    public void onHostInvalidated() {\n        this.mHost = null;\n        if (this.mSaveHostButton != null) {\n            setAddSaveButtonEnabled(false);\n        }\n    }\n    public void onBackPressed() {\n        attemptSaveAndExit();\n    }\n    private void attemptSaveAndExit() {\n        if (this.mHost == null) {\n            showDiscardDialog();\n            return;\n        }\n        this.mHostDb.saveHost(this.mHost);\n        if (this.mBridge != null) {\n            this.mBridge.setCharset(this.mHost.getEncoding());\n        }\n        finish();\n    }\n    private void showDiscardDialog() {\n        Builder builder = new Builder(this, R.style.AlertDialogTheme);\n        builder.setMessage((int) R.string.discard_host_changes_message).setPositiveButton(R.string.discard_host_button, new OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n                EditHostActivity.this.finish();\n            }\n        }).setNegativeButton(R.string.discard_host_cancel_button, new OnClickListener() {\n            public void onClick(DialogInterface dialog, int which) {\n            }\n        });\n        builder.show();\n    }\n    private void setAddSaveButtonEnabled(boolean enabled) {\n        this.mSaveHostButton.setEnabled(enabled);\n        this.mSaveHostButton.getIcon().setAlpha(enabled ? 255 : 130);\n    }\n}\n", "source": "HostListActivity", "source_actcode": "public class HostListActivity extends AppCompatListActivity implements OnHostStatusChangedListener {\n    protected TerminalManager bound = null;\n    private boolean closeOnDisconnectAll = true;\n    private ServiceConnection connection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className, IBinder service) {\n            HostListActivity.this.bound = ((TerminalBinder) service).getService();\n            HostListActivity.this.updateList();\n            HostListActivity.this.bound.registerOnHostStatusChangedListener(HostListActivity.this);\n            if (HostListActivity.this.waitingForDisconnectAll) {\n                HostListActivity.this.disconnectAll();\n            }\n        }\n        public void onServiceDisconnected(ComponentName className) {\n            HostListActivity.this.bound.unregisterOnHostStatusChangedListener(HostListActivity.this);\n            HostListActivity.this.bound = null;\n            HostListActivity.this.updateList();\n        }\n    };\n    private MenuItem disconnectall;\n    private HostStorage hostdb;\n    private List&lt;HostBean> hosts;\n    protected LayoutInflater inflater = null;\n    protected boolean makingShortcut = false;\n    private SharedPreferences prefs = null;\n    private MenuItem sortcolor;\n    protected boolean sortedByColor = false;\n    private MenuItem sortlast;\n    private boolean waitingForDisconnectAll = false;\n    private class HostAdapter extends ItemAdapter {\n        private final List&lt;HostBean> hosts;\n        private final TerminalManager manager;\n        public HostAdapter(Context context, List&lt;HostBean> hosts, TerminalManager manager) {\n            super(context);\n            this.hosts = hosts;\n            this.manager = manager;\n        }\n        private int getConnectedState(HostBean host) {\n            if (this.manager == null || host == null) {\n                return 1;\n            }\n            if (this.manager.getConnectedBridge(host) != null) {\n                return 2;\n            }\n            if (this.manager.disconnected.contains(host)) {\n                return 3;\n            }\n            return 1;\n        }\n        public HostViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n            return new HostViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.item_host, parent, false));\n        }\n        @TargetApi(16)\n        private void hideFromAccessibility(View view, boolean hide) {\n            view.setImportantForAccessibility(hide ? 2 : 1);\n        }\n        public void onBindViewHolder(ItemViewHolder holder, int position) {\n            int chosenStyleFirstLine;\n            int chosenStyleSecondLine;\n            HostViewHolder hostHolder = (HostViewHolder) holder;\n            HostBean host = (HostBean) this.hosts.get(position);\n            hostHolder.host = host;\n            if (host == null) {\n                Log.e(\"HostAdapter\", \"Host bean is null!\");\n                hostHolder.nickname.setText(\"Error during lookup\");\n            } else {\n                hostHolder.nickname.setText(host.getNickname());\n            }\n            switch (getConnectedState(host)) {\n                case 1:\n                    hostHolder.icon.setImageState(new int[0], true);\n                    hostHolder.icon.setContentDescription(null);\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, true);\n                        break;\n                    }\n                    break;\n                case 2:\n                    hostHolder.icon.setImageState(new int[]{16842912}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_connected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                case 3:\n                    hostHolder.icon.setImageState(new int[]{16842920}, true);\n                    hostHolder.icon.setContentDescription(HostListActivity.this.getString(R.string.image_description_disconnected));\n                    if (VERSION.SDK_INT &gt;= 16) {\n                        hideFromAccessibility(hostHolder.icon, false);\n                        break;\n                    }\n                    break;\n                default:\n                    Log.e(\"HostAdapter\", \"Unknown host state encountered: \" + getConnectedState(host));\n                    break;\n            }\n            if (\"red\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Red;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Red;\n            } else if (\"green\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Green;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Green;\n            } else if (\"blue\".equals(host.getColor())) {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText.Blue;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText.Blue;\n            } else {\n                chosenStyleFirstLine = R.style.ListItemFirstLineText;\n                chosenStyleSecondLine = R.style.ListItemSecondLineText;\n            }\n            hostHolder.nickname.setTextAppearance(this.context, chosenStyleFirstLine);\n            hostHolder.caption.setTextAppearance(this.context, chosenStyleSecondLine);\n            CharSequence nice = this.context.getString(R.string.bind_never);\n            if (host.getLastConnect() &gt; 0) {\n                nice = DateUtils.getRelativeTimeSpanString(host.getLastConnect() * 1000);\n            }\n            hostHolder.caption.setText(nice);\n        }\n        public long getItemId(int position) {\n            return ((HostBean) this.hosts.get(position)).getId();\n        }\n        public int getItemCount() {\n            return this.hosts.size();\n        }\n    }\n    public class HostViewHolder extends ItemViewHolder {\n        public final TextView caption;\n        public HostBean host;\n        public final ImageView icon;\n        public final TextView nickname;\n        public HostViewHolder(View v) {\n            super(v);\n            this.icon = (ImageView) v.findViewById(16908294);\n            this.nickname = (TextView) v.findViewById(16908308);\n            this.caption = (TextView) v.findViewById(16908309);\n        }\n        public void onClick(View v) {\n            Intent contents = new Intent(\"android.intent.action.VIEW\", this.host.getUri());\n            contents.setFlags(67108864);\n            if (HostListActivity.this.makingShortcut) {\n                ShortcutIconResource icon = ShortcutIconResource.fromContext(HostListActivity.this, R.drawable.icon);\n                Intent intent = new Intent();\n                intent.putExtra(\"android.intent.extra.shortcut.INTENT\", contents);\n                intent.putExtra(\"android.intent.extra.shortcut.NAME\", this.host.getNickname());\n                intent.putExtra(\"android.intent.extra.shortcut.ICON_RESOURCE\", icon);\n                HostListActivity.this.setResult(-1, intent);\n                HostListActivity.this.finish();\n                return;\n            }\n            contents.setClass(HostListActivity.this, ConsoleActivity.class);\n            HostListActivity.this.startActivity(contents);\n        }\n        public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {\n            boolean z;\n            menu.setHeaderTitle(this.host.getNickname());\n            MenuItem connect = menu.add(R.string.list_host_disconnect);\n            final TerminalBridge bridge = HostListActivity.this.bound == null ? null : HostListActivity.this.bound.getConnectedBridge(this.host);\n            if (bridge != null) {\n                z = true;\n            } else {\n                z = false;\n            }\n            connect.setEnabled(z);\n            connect.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    bridge.dispatchDisconnect(true);\n                    return true;\n                }\n            });\n            menu.add(R.string.list_host_edit).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForExistingHost(HostListActivity.this, HostViewHolder.this.host.getId()), 1);\n                    return true;\n                }\n            });\n            MenuItem portForwards = menu.add(R.string.list_host_portforwards);\n            portForwards.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    Intent intent = new Intent(HostListActivity.this, PortForwardListActivity.class);\n                    intent.putExtra(\"android.intent.extra.TITLE\", HostViewHolder.this.host.getId());\n                    HostListActivity.this.startActivityForResult(intent, 1);\n                    return true;\n                }\n            });\n            if (!TransportFactory.canForwardPorts(this.host.getProtocol())) {\n                portForwards.setEnabled(false);\n            }\n            menu.add(R.string.list_host_delete).setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    new Builder(HostListActivity.this, R.style.AlertDialogTheme).setMessage(HostListActivity.this.getString(R.string.delete_message, new Object[]{HostViewHolder.this.host.getNickname()})).setPositiveButton(R.string.delete_pos, new OnClickListener() {\n                        public void onClick(DialogInterface dialog, int which) {\n                            if (bridge != null) {\n                                bridge.dispatchDisconnect(true);\n                            }\n                            HostListActivity.this.hostdb.deleteHost(HostViewHolder.this.host);\n                            HostListActivity.this.updateList();\n                        }\n                    }).setNegativeButton(R.string.delete_neg, null).create().show();\n                    return true;\n                }\n            });\n        }\n    }\n    public void onStart() {\n        super.onStart();\n        bindService(new Intent(this, TerminalManager.class), this.connection, 1);\n        this.hostdb = HostDatabase.get(this);\n    }\n    public void onStop() {\n        super.onStop();\n        unbindService(this.connection);\n        this.hostdb = null;\n        this.closeOnDisconnectAll = true;\n    }\n    public void onResume() {\n        super.onResume();\n        if ((getIntent().getFlags() & 1048576) == 0 && \"org.connectbot.action.DISCONNECT\".equals(getIntent().getAction())) {\n            Log.d(\"CB.HostListActivity\", \"Got disconnect all request\");\n            disconnectAll();\n        }\n        boolean z = this.waitingForDisconnectAll && this.closeOnDisconnectAll;\n        this.closeOnDisconnectAll = z;\n    }\n    protected void onNewIntent(Intent intent) {\n        super.onNewIntent(intent);\n        setIntent(intent);\n    }\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        if (requestCode == 1) {\n            updateList();\n        }\n    }\n    public void onCreate(Bundle icicle) {\n        boolean z;\n        int i = 0;\n        super.onCreate(icicle);\n        setContentView((int) R.layout.act_hostlist);\n        setTitle(R.string.title_hosts_list);\n        this.mListView = (RecyclerView) findViewById(R.id.list);\n        this.mListView.setHasFixedSize(true);\n        this.mListView.setLayoutManager(new LinearLayoutManager(this));\n        this.mListView.addItemDecoration(new ListItemDecoration(this));\n        this.mEmptyView = findViewById(R.id.empty);\n        this.prefs = PreferenceManager.getDefaultSharedPreferences(this);\n        if (Build.MANUFACTURER.equals(\"HTC\") && Build.DEVICE.equals(\"dream\")) {\n            Editor editor = this.prefs.edit();\n            boolean doCommit = false;\n            if (!(this.prefs.contains(\"shiftfkeys\") || this.prefs.contains(\"ctrlfkeys\"))) {\n                editor.putBoolean(\"shiftfkeys\", true);\n                editor.putBoolean(\"ctrlfkeys\", true);\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"stickymodifiers\")) {\n                editor.putString(\"stickymodifiers\", \"yes\");\n                doCommit = true;\n            }\n            if (!this.prefs.contains(\"keymode\")) {\n                editor.putString(\"keymode\", \"Use right-side keys\");\n                doCommit = true;\n            }\n            if (doCommit) {\n                editor.commit();\n            }\n        }\n        if (\"android.intent.action.CREATE_SHORTCUT\".equals(getIntent().getAction()) || \"android.intent.action.PICK\".equals(getIntent().getAction())) {\n            z = true;\n        } else {\n            z = false;\n        }\n        this.makingShortcut = z;\n        this.hostdb = HostDatabase.get(this);\n        this.sortedByColor = this.prefs.getBoolean(\"sortByColor\", false);\n        registerForContextMenu(this.mListView);\n        FloatingActionButton addHostButton = (FloatingActionButton) findViewById(R.id.add_host_button);\n        if (this.makingShortcut) {\n            i = 8;\n        }\n        addHostButton.setVisibility(i);\n        addHostButton.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                HostListActivity.this.startActivityForResult(EditHostActivity.createIntentForNewHost(HostListActivity.this), 1);\n            }\n        });\n        this.inflater = LayoutInflater.from(this);\n    }\n    public boolean onPrepareOptionsMenu(Menu menu) {\n        boolean z = false;\n        super.onPrepareOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            boolean z2;\n            MenuItem menuItem = this.sortcolor;\n            if (this.sortedByColor) {\n                z2 = false;\n            } else {\n                z2 = true;\n            }\n            menuItem.setVisible(z2);\n            this.sortlast.setVisible(this.sortedByColor);\n            MenuItem menuItem2 = this.disconnectall;\n            if (this.bound != null && this.bound.getBridges().size() &gt; 0) {\n                z = true;\n            }\n            menuItem2.setEnabled(z);\n        }\n        return true;\n    }\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        if (!this.makingShortcut) {\n            this.sortcolor = menu.add(R.string.list_menu_sortcolor);\n            this.sortcolor.setIcon(17301586);\n            this.sortcolor.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = true;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            this.sortlast = menu.add(R.string.list_menu_sortname);\n            this.sortlast.setIcon(17301586);\n            this.sortlast.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem item) {\n                    HostListActivity.this.sortedByColor = false;\n                    HostListActivity.this.updateList();\n                    return true;\n                }\n            });\n            MenuItem keys = menu.add(R.string.list_menu_pubkeys);\n            keys.setIcon(17301551);\n            keys.setIntent(new Intent(this, PubkeyListActivity.class));\n            MenuItem colors = menu.add(R.string.title_colors);\n            colors.setIcon(17301587);\n            colors.setIntent(new Intent(this, ColorsActivity.class));\n            this.disconnectall = menu.add(R.string.list_menu_disconnect);\n            this.disconnectall.setIcon(17301564);\n            this.disconnectall.setOnMenuItemClickListener(new OnMenuItemClickListener() {\n                public boolean onMenuItemClick(MenuItem menuItem) {\n                    HostListActivity.this.disconnectAll();\n                    return false;\n                }\n            });\n            MenuItem settings = menu.add(R.string.list_menu_settings);\n            settings.setIcon(17301577);\n            settings.setIntent(new Intent(this, SettingsActivity.class));\n            MenuItem help = menu.add(R.string.title_help);\n            help.setIcon(17301568);\n            help.setIntent(new Intent(this, HelpActivity.class));\n        }\n        return true;\n    }\n    private void disconnectAll() {\n        if (this.bound == null) {\n            this.waitingForDisconnectAll = true;\n        } else {\n            new Builder(this, R.style.AlertDialogTheme).setMessage(getString(R.string.disconnect_all_message)).setPositiveButton(R.string.disconnect_all_pos, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.bound.disconnectAll(true, false);\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                    if (HostListActivity.this.closeOnDisconnectAll) {\n                        HostListActivity.this.finish();\n                    }\n                }\n            }).setNegativeButton(R.string.disconnect_all_neg, new OnClickListener() {\n                public void onClick(DialogInterface dialog, int which) {\n                    HostListActivity.this.waitingForDisconnectAll = false;\n                    HostListActivity.this.setIntent(new Intent());\n                }\n            }).create().show();\n        }\n    }\n    protected void updateList() {\n        if (this.prefs.getBoolean(\"sortByColor\", false) != this.sortedByColor) {\n            Editor edit = this.prefs.edit();\n            edit.putBoolean(\"sortByColor\", this.sortedByColor);\n            edit.commit();\n        }\n        if (this.hostdb == null) {\n            this.hostdb = HostDatabase.get(this);\n        }\n        this.hosts = this.hostdb.getHosts(this.sortedByColor);\n        if (this.bound != null) {\n            Iterator it = this.bound.getBridges().iterator();\n            while (it.hasNext()) {\n                TerminalBridge bridge = (TerminalBridge) it.next();\n                if (!this.hosts.contains(bridge.host)) {\n                    this.hosts.add(0, bridge.host);\n                }\n            }\n        }\n        this.mAdapter = new HostAdapter(this, this.hosts, this.bound);\n        this.mListView.setAdapter(this.mAdapter);\n        adjustViewVisibility();\n    }\n    public void onHostStatusChanged() {\n        updateList();\n    }\n}\n", "sourceimg": "./org.connectbot_19100/activity_img/org.connectbot.HostListActivity.png", "type": "suit", "target_fullname": "org.connectbot.EditHostActivity"},
];
